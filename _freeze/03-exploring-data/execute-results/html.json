{
  "hash": "b59729315b630e2504fb8aff04380964",
  "result": {
    "engine": "knitr",
    "markdown": "# Exploring and Transforming Data {#sec-chap03}\n\n\n\n\n\n\n## Chapter section list {.unnumbered}\n\n::::: {#obj-chap03}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nTable of content (TOC)\n:::\n\n::: {.my-objectives-container}\n\n- Examing distribution (@sec-chap03-1)\n    - Histograms (@sec-chap03-1-1)\n    - Density estimation (@sec-chap03-1-2)\n    - Quantile-comparison plots (@sec-chap03-1-3)\n    - Boxplots (@sec-chap03-1-4)\n- Examing relationships (@sec-chap03-2)\n    - Scatterplots (@sec-chap03-2-1)\n    - Parallel boxplots (@sec-chap03-2-2)\n    - More on the plot function (@sec-chap03-2-3)\n- Examining multivariate data (@sec-chap03-3)\n    - Three-dimensional plots (@sec-chap03-3-1)\n    - Scatterplot Matrices (@sec-chap03-3-2)\n- Transforming data (@sec-chap03-4)\n    - Logarithms\n    - Power transformations\n    - Transformations and EDA\n    - Transforming resticted-range variables\n    - Other transformations\n- Point labelling and identification (@sec-chap03-5)\n    - The identify() function (@sec-chap03-5-1)\n    - Automatic point labelling with car::showLabels() (@sec-chap03-5-2)\n    \n\n\n\n:::\n::::\n:::::\n\n## Examing distributions {#sec-chap03-1}\n\n### Histograms {#sec-chap03-1-1}\n\n> The shape of the histogram is determined in part by the number of bins and the location of their boundaries. With too few bins, the histogram can hide interesting features of the data, while with too many bins, the histogram is very rough, displaying spurious features of the data.\n\nThe help page for `ggplot2::geom_histogram()` recommends: \"You should always override this [default] value, exploring multiple widths to find the best to illustrate the stories in your data.\"\n\nThere are several algorithm to calculate an optimal number of bins depending of the sample size and distribution. Fox/Weisberg mention the rule by Freedman and Diaconis [-@freedman1981a]:\n\n$$\n\\frac{n^\\frac{1}{3}(max-min)}{2(Q_{3}-Q_{1})}\n$$ {#eq-chap03-FD}\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-histograms}\n: Histograms\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### base R\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-base-r-histogram}\n: Default base R histogram\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-base-r-histogram}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige <- carData::Prestige\n\nbase::with(Prestige, graphics::hist(income))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-base-r-histogram-1.png){width=672}\n:::\n:::\n\nDefault\tbase R histogram of income in the Canadian occupational-prestige data\n:::\n\n::::\n:::::\n\n###### FD rule\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-compute-bins-FD}\n: Compute number of bins with the Freedman-Diaconis rule [-@freedman1981a]\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-compute-bins-FD}\n\n::: {.cell}\n\n```{.r .cell-code}\nIncome <- Prestige$income\n    \nbase::ceiling(\n    base::length(Income)^(1/3) * \n    (base::max(Income) - base::min(Income)) / \n    (2 * (stats::quantile(Income, 0.75) \n          - stats::quantile(Income, 0.25)))[[1]]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 15\n```\n\n\n:::\n:::\n\n\nCompute number of bins of `income` with the Freedman-Diaconis rule [-@freedman1981a]\n:::\n\n::::\n:::::\n\n\n###### base R 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-fd-base-r-histogram2}\n: Base R histogram with `breaks = \"FD\"`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-fd-base-r-histogram2}\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::with(Prestige, graphics::hist(income, breaks = \"FD\"))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/fd-base-r-histogram2-1.png){width=672}\n:::\n:::\n\n\nBase R histogram: Number of bins computed after Freedman and Diaconis [-@freedman1981a]\n:::\n\n::::\n:::::\n\n\n\n###### ggplot2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-ggplot2-histogram}\n: Histogram with {**ggplot2**} (30 bins default)\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-ggplot2-histogram}    \n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        fill = \"grey\",\n        color = \"black\"\n        )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-ggplot2-histogram-1.png){width=672}\n:::\n:::\n\n\nHistogram with {**ggplot2**} with default number of bins (30)\n:::\n\n::::\n:::::\n\n###### ggplot2 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-ggplot2-histogram2}\n: Histogram with {**ggplot2**} with bin number computed after Freedman & Diaconis\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-ggplot2-histogram2}    \n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        fill = \"grey\",\n        color = \"black\",\n        bins = grDevices::nclass.FD(Prestige$income)\n        )\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-ggplot2-histogram2-1.png){width=672}\n:::\n:::\n\n\nHistogram with {**ggplot2**}. Bin number computed after Freedman and Diaconis [-@freedman1981a]\n:::\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\nA special type of histograms are *stem-and-leaf displays*, which are histograms that encode the numeric data directly in their bars. I do not find them very usefull, because they are different to interpret and do not have essential advantages. They may be helpful for small data sets as a kind of paper-and-pencil method for visualizing.\n\nStem-and-leaf graphs can be produced with the `graphics::stem()` function or using the `aplpack::stem.leaf()` function. \n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-chap03-aplpack}\n: Another Plot Package {aplpack}\n::::::\n:::\n::::{.my-resource-container}\n##### Functions for drawing some special plots\n\nBesides plotting stem-and-leaf graphs with `aplpack::stem.leaf()` from the {**aplpack**} package, I noticed that there are some other interesting graphic functions in this package, which I should explore.\n\nFor instance `aplpack::plotsummary()` is an interesting function that shows important characteristics of the variables of a data set. For each variable a plot is computed consisting of a <a class='glossary' title='Bar charts are visual displays of data often used to examine similarities and differences across categories of things; bars can represent frequencies, percentages, means, or other statistics. (SwR, Glossary)'>barplot</a>, an <a class='glossary' title='In statistics, an empirical distribution function (commonly also called an empirical cumulative distribution function, eCDF) is the distribution function associated with the empirical measure of a sample. This cumulative distribution function is a step function that jumps up by 1/n at each of the n data points. Its value at any specified value of the measured variable is the fraction of observations of the measured variable that are less than or equal to the specified value. (Wikipedia) A CDF is a hypothetical model of a distribution, the ECDF models empirical (i.e. observed) data. (Statistics How To)'>ecdf</a>, a <a class='glossary' title='Density plots are used for examining the distribution of a variable measured along a continuum; density plots are similar to histograms but are smoothed and may not show existing gaps in data (SwR, Glossary)'>density trace</a> and a <a class='glossary' title='Boxplots are a visual representation of data that shows central tendency (usually the median) and spread (usually the interquartile range) of a numeric variable for one or more groups; boxplots are often used to compare the distribution of a continuous variable across several groups. (SwR, Glossary)'>boxplot</a>. \n\nSee @pak-aplpack.\n::::\n:::::\n\n\n\n\n\n\n\n\n\n### Density Estimation {#sec-chap03-1-2}\n\n*Nonparametric density estimation* often produces a more satisfactory representation of the distribution of a numeric variable than a traditional histogram. Unlike a histogram, a nonparametric density estimate is continuous and so it doesn’t dissect the range of a numeric variable into discrete bins.\n\n<a class='glossary' title='Kernel density estimation (KDE) extrapolates data to an estimated population probability density function. It’s called kernel density estimation because each data point is replaced with a kernel—a weighting function to estimate the pdf. The function spreads the influence of any point around a narrow region surrounding the point. (Statistics How To)'>Kernel density estimation</a> (KDE) is the application of kernel smoothing for probability density estimation. The bandwith controls\tthe\tdegree of smoothness of\tthe density\testimate:\n\nThe bandwidth of a density estimate is the continuous analog of the bin width of a histogram: If the bandwidth is too large, then the density estimate is smooth but biased as an estimator of the true density, while if the bandwidth is too small, then bias is low but the estimate is too rough and the variance of the estimator is large.\n\nThe `adaptiveKernel()` function in the {**car**} package employs an algorithm that uses different bandwidths depending on the local observed density of the data, with smaller bandwidths in dense regions and larger bandwidths in sparse regions.\n\n\n\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-density-estimation}\n: Density estimation\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### stats::density() 1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density1}\n: Nonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates `(adjust = 1)`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-density1}\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(Prestige, {\n    hist(\n        income,\n        freq = FALSE,\n        ylim = c(0, 1.5e-4),\n        breaks = \"FD\",\n        main = \"\"\n    )\n    lines(density(income, from = 0), lwd = 3, lty = 2)\n    lines(car::adaptiveKernel(income, from = 0, adjust = 1),\n          lwd = 2,\n          lty = 1) # solid line\n    rug(income)\n    legend(\n        \"topright\",\n        c(\"Fixed bandwidth\", \"Adaptive bandwidth\"),\n        lty = 2:1, # dashed with proportion 2:1\n        lwd = 2,\n        inset = .02\n    )\n    box()\n})\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density1-1.png){width=672}\n:::\n:::\n\nNonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates (adjust = 1) for the distribution of income in the `Prestige` data set; a density histogram of income is also shown. The rug-plot at the bottom of the graph shows the location of the income values.\n:::\n\n***\n\nThe command to draw the graph in @lst-chap03-density1 is relatively complicated and thus requires some explanation: \n\n- The `base::with()` function is used as usual to pass the data frame `Prestige` to the second argument. Here the second argument is a compound expression consisting of all the commands between the initial { and the final }. \n- The call to `graphics::hist()` draws a histogram in density scale, so the areas of all the bars in the histogram sum to 1. \n- The argument `main=\"\"` suppresses the title for the histogram. \n- The `ylim` argument sets the range for the y-axis to be large enough to accommodate the adaptive-kernel density estimate. The value 1.5e-4 is in scientific notation, 1.5 × 10−4 = 0.00015. \n- The fixed-bandwidth and adaptive-bandwidth kernel estimates are computed, respectively, by `stats::density()` and `car::adaptiveKernel()`. \n- In each case, the result returned by the function is then supplied as an argument to the `graphics::lines()` function to add the density estimate to the graph. \n- The argument `from = 0` to both `density()` and `adaptiveKernel()` ensures that the density estimates don’t go below income = 0. \n- The call to `graphics::rug()` draws a rug-plot (one-dimensional scatterplot) of the data at the bottom of the graph. \n- The remaining two commands add a legend and a frame around the graph.\n\n\n\n\n::::\n:::::\n\nBoth nonparametric density estimates and the histogram suggest a mode at around $5,000, and all three show that the distribution of income is rightskewed. The fixed-bandwidth kernel estimate has more wiggle at the right where data are sparse, and the histogram is rough in this region, while the adaptive-kernel estimator is able to smooth out the density estimate in the low-density region. \n\n\n###### stats::density() 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density2}\n: Nonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates `(adjust = 0.5)`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-density2}    \n\n::: {.cell}\n\n```{.r .cell-code}\nwith(Prestige, {\n    hist(\n        income,\n        freq = FALSE,\n        ylim = c(0, 1.5e-4),\n        breaks = \"FD\",\n        main = \"\"\n    )\n    lines(density(income, from = 0), lwd = 3, lty = 2)\n    lines(car::adaptiveKernel(income, from = 0, adjust = 0.5),\n          lwd = 2,\n          lty = 1) # solid\n    rug(income)\n    legend(\n        \"topright\",\n        c(\"Fixed bandwidth\", \"Adaptive bandwidth\"),\n        lty = 2:1, # dashed with proportion 2:1\n        lwd = 2,\n        inset = .02\n    )\n    box()\n})\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density2-1.png){width=672}\n:::\n:::\n\n\nNonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates (adjust = 0.5) for the distribution of `income` in the `Prestige` data set; a density histogram of `income` is also shown. The rug-plot at the bottom of the graph shows the location of the `income` values.\n:::\n\n::::\n:::::\n\n###### ggplot2::geom_density()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density-ggplot2}\n: Histogram, rug and smoothed density estimate\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-density-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        ggplot2::aes(y = ggplot2::after_stat(density)),\n        color = \"black\",\n        fill = \"grey\",\n        bins = grDevices::nclass.FD(Prestige$income)\n    ) +\n    ggplot2::geom_density(\n        adjust = 1,\n        kernel = \"gaussian\",\n        color = \"red\",\n        linewidth = 1\n    ) +\n    ggplot2::geom_rug()\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density-ggplot2-1.png){width=672}\n:::\n:::\n\n\nHistogram with a kernel density estimate overlaid, which is a smoothed version of the histogram. The rug-plot at the bottom of the graph shows the location of the `income` values from the `Prestige` dataset.\n:::\n\n::::\n:::::\n\n::: {.callout-warning #wrn-chap03-adaptive-kernel}\n##### Don't know how to inlcude adaptive kernel density estimation\n\nThe {**car**} package has with `car::densityPlot()` an additional function, that both computes and draws density estimates with either a fixed or adaptive kernel. I do not know how to include the adaptive kernel density estimation from the {**car**} package to get a full reproduction of book’s Figure 3.3 with {**ggplot2**}.\n:::\n\n\n\n\n###### my_hist_dnorm()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-my-hist-dnorm}\n: Using my own function to create a histogram with density estimate and overlaid dnorm curve\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-my-hist-dnorm}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_hist_dnorm(Prestige, Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/my-hist-dnorm-1.png){width=672}\n:::\n:::\n\n\nHistogram with density estimation and overlaid dnorm curve\n:::\n\n***\n\nI have my own function `my_hist_dnorm()` adapted by supplying the Freeman-Diaconis rule [-@freedman1981a] as default value for the number of bins.\n\nAdditionally I have written with `my_nbins()` another small functions which returns the number of bins according to the Freeman-Diaconis rule.\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n### Quantile-comparison plots {#sec-chap03-1-3}\n\nA *quantile-comparison plot*, or quantile-quantile plot (<a class='glossary' title='A quantile-quantile plot is a visualization of data using probabilities to show how closely a variable follows a normal distribution. (SwR, Glossary) This plot is made up of points below which a certain percentage of the observations fall. On the x-axis are normally distributed values with a mean of 0 and a standard deviation of 1. On the y-axis are the observations from the data. If the data are normally distributed, the values will form a diagonal line through the graph. (SwR, chapter 6)'>Q-Q-plot</a>), provides an effective graphical means of making the comparison, plotting the ordered data on the vertical axis against the corresponding quantiles of the reference distribution on the horizontal axis. If the data conform to the reference distribution, then the points in the quantile-comparison plot should fall close to a straight line, within sampling error.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-qq-plots}\n: Quantile-quantile plots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### stats::qqnorm()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-stats-qqnorm}\n: Base R: Quantile-Quantile Plot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-stats-qqnorm}\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::qqnorm(Prestige$income,\n              ylab = \"Income\")\nstats::qqline(Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/stats-qqnorm-1.png){width=672}\n:::\n:::\n\nNormal quantile-comparison plot\tfor\t`income` from the `Prestige` dataset.\n:::\n\n***\nMany points, especially at the right of the graph, are far from the line of the theoretical quantiles. We have therefore evidence that the distribution of `income` is not like a sample from a normal population.\n\n::::\n:::::\n\n\n###### car::qqPlot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-car-qqplot}\n: car: Quantile-quantile plot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-car-qqplot}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::qqPlot( ~ income, data = Prestige, id = list(n = 3))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/car-qqplot-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> general.managers       physicians          lawyers \n#>                2               24               17\n```\n\n\n:::\n:::\n\n\nNormal quantile-comparison plot for `income.` \n:::\n***\nThe broken lines give a pointwise 95% confidence envelope around the fitted solid line. Three points were labeled automatically. Because many points, especially at the right of the graph, are outside the confidence bounds, we have evidence that the distribution of `income` is not like a sample from a normal population.\n\n::::\n:::::\n\nThe function `car::qqPLot()` has several advantages:\n\n1) It produces a pointwise 95% confidence envelope around the fitted solid line.\n2) It labels the most extreme data points.\n3) The `car::qqPlot()` function can be used to plot the data against *any* reference distribution.\n\n###### my_qq_plot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-my-qq-plot}\n: Q-Q-plot using my own function applying {**ggplot2**}\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-my-qq-plot}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_qq_plot(Prestige, Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/my-qq-plot-1.png){width=672}\n:::\n:::\n\n\nQ-Q-plot: Comparing data points against a normal distribution \n:::\n\n***\n\nMy own function lacks the confidence interval cannot label the most extreme points. I have to think if and how I could add these features to `my_qq_plot()`.\n\n::::\n:::::\n\n###### chi-square\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-chi-square-illustration}\n: car::qqPlot: Chi-square illustration\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-chi-square-illustration}\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::set.seed(124) # for reproducibility\ncar::qqPlot(\n    rchisq(100, 3), \n    distribution = \"chisq\", df = 3,\n    id = FALSE)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/chi-square-illustration-1.png){width=672}\n:::\n:::\n\n\nQuantile-comparison plot of a sample of size n = 100 from the $χ^2(3)$ distribution against the distribution from which the sample was drawn.\n:::\n***\n\nThe argument `df = 3` to `car::qqPlot()` is passed by it to the `stats::dchisq()` and `stats::qchisq()` functions. The points should, and do, closely match the straight line on the graph, with the fit a bit worse for the larger values in the sample. The confidence envelope suggests that these deviations for large values are to be expected, as they reflect the greater variability of sampled values in the long right tail of the $X^2(3)$ density function.\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\nThe `car::qqPlot()` function can be used to plot the data against any reference distribution for which there are <a class='glossary' title='Quantiles are cut points dividing the range of a probability distribution into continuous intervals with equal probabilities (Wikipedia)'>quantile</a> and density function in R. You have simply to specify the root word for the distribution. For\texample, the root\tfor\tthe\tnormal distribution is \"norm\", with\tdensity\tfunction\t`stats::dnorm()` and quantile function `stats::qnorm()`. See also [chapter 8](https://rstudio.github.io/r-manuals/r-intro/Probability-distributions.html) of the the Quarto manual of [An Introduction to R](https://rstudio.github.io/r-manuals/r-intro/). [@rcoreteam2024]\n\n![Probability functions in R](img/r-probability-functions.png){#fig-03-1 \nfig-alt='List of probability functions in R as a two part table with five columns: It shows the name of the \"Distribution\" (column 1), such as \"normal\" or \"chi-square\", the \"Design or Mass Function\" (column 2), such as \"dnorm(x, mean = 0, sd = 1)\" or \"qchisq(n, df)\", the \"Quantile Function\" (column 3), such as \"qnorm(p, mean = 0, sd = 1)\" the \"Distribution Function\" column 4), such as \"pnorm(q, mean = 0, sd = 1)\" or \"pchisq(q, df)\" and the \"Random Number Function\" (column 5), such as \"rnorm(n, mean = 0, sd = 1)\" or \"rchisq(n, df)\"' fig-align=\"center\" \nwidth=\"70%\"}\n\nAn illustration is shown with @lst-chap03-chi-square-illustration: The `rchisq()` function is used to generate a random sample from the chi-square distribution with three df (<a class='glossary' title='Degree of Freedom (df) is the number of pieces of information that are allowed to vary in computing a statistic before the remaining pieces of information are known; degrees of freedom are often used as parameters for distributions (e.g., chi-squared, F). (SwR, Glossary)'>degrees of freedom</a>) and then plotted the sample against the distribution from which it was drawn.\n\n### Boxplots {#sec-chap03-1-4}\n\nAlthough boxplots are most commonly used to compare distributions\tamong groups, they can also be drawn to summarize the distribution of a numeric variable in a single sample, providing a quick check of symmetry and the presence of outliers.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-boxplot}\n: Boxplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-base-r}\n: graphics::boxplot(): Boxplot of income\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics::boxplot(Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-base-r-1.png){width=672}\n:::\n:::\n\nBoxplot of income, plotted with base R `graphics::boxplot()`\n:::\n\n::::\n:::::\n\n\n###### car::Boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-car}\n: car::Boxplot(): Boxplot of income\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::Boxplot(~ income, data = Prestige)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-car-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"general.managers\"         \"lawyers\"                 \n#> [3] \"physicians\"               \"veterinarians\"           \n#> [5] \"osteopaths.chiropractors\"\n```\n\n\n:::\n:::\n\n\nBoxplot of income, plotted with `car::Boxplot()`. Several outlying cases were labeled automatically.\n:::\n\n***\n\n`car::Boxplot()` adds automatic identification of outlying values (by default, up to 10), points that are shown individually in the boxplot. Points identified as outliers are those beyond the *inner* fences, which are 1.5 times the interquartile range below the first quartile and above the third quartile.\n\nThe\tnames shown\tin the output are the cases that are labeled on the graph and are drawn from the row names of the `Prestige` data set.\n\n::::\n:::::\n\n\n\n\n\n:::\n\n::::\n:::::\n\nThe `ggplot2::geom_boxplot()` draws boxplots but has no options to label the outliers. To reproduce Figure 3.6 I need to add some code to the compute the outliers and label them with {**ggrepel**}. \n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-chap03-boxplot-outlier-labelled}\n: {ggplot2} boxplot with outlier labelled\n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n###### default\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-ggplot2}\n: Boxplot of income (default)\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige <- carData::Prestige\n\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(y = income)\n    ) +\n    ggplot2::geom_boxplot() \n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-ggplot2-1.png){width=672}\n:::\n:::\n\n\nBoxplot of income, plotted with `ggplot2::geom_boxplot()`\n:::\n\n::::\n:::::\n\n\n###### outliers\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-compute-boxplot-outliers}\n: Boxplot of income with outliers labelled\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-compute-boxplot-outliers}  \n\n::: {.cell}\n\n```{.r .cell-code}\nmy_find_boxplot_outlier <- function(x) {\n  return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))\n}\n\n\nprestige1 <- Prestige |> \n  dplyr::mutate(outlier = my_find_boxplot_outlier(income)) |> \n  tibble::rownames_to_column(var = \"ID\") |>\n  dplyr::mutate(outlier =\n        dplyr::case_when(outlier == TRUE ~ ID,\n                         outlier == FALSE ~ \"\")\n  )\n\nset.seed(42)\n\nprestige1 |> \n    ggplot2::ggplot(\n        ggplot2::aes(y = income)\n    ) +\n    ggrepel::geom_text_repel(\n      ggplot2::aes(\n        x = 0,\n        label = outlier\n        ),\n      nudge_x      = 0.05,\n      direction    = \"y\",\n      hjust        = 0,\n    ) +\n    ggplot2::geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/compute-boxplot-outliers-1.png){width=672}\n:::\n:::\n\n\nBoxplot of income with outliers labelled plotted with `ggplot2::geom_boxplot()` and using `ggrepel::geom_text_repel()` \n:::\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n\n## Examing relationships {#sec-chap03-2}\n\n### Scatterplots {#sec-chap03-2-1}\n\nUnderstanding and using scatterplots is at the heart of regression analysis!\n\n<a class='glossary' title='A scatterplot is a graph that shows one dot for each observation in the data set (SwR, Glossary)'>Scatterplots</a> are useful for studying the mean and variance functions in the regression of the y-variable on the x-variable. In addition, scatterplots can help identify <a class='glossary' title='Outliers are observations with unusual values. (SwR, Glossary). Outliers are observed data points that are far from the least squares line. They have large “errors”, where the “error” or residual is the vertical distance from the line to the point. (Introductory Statistics 12.6)'>outliers</a>, points that have values of the response far different from the expected value, and <a class='glossary' title='You can think of the regression line being balanced at the x-mean and the further from that location a point is, the more a single point can move the line. We can measure the distance of points from the mean to quantify each observation’s potential for impact on the line using what is called the leverage of a point. Leverage is a positive numerical measure with larger values corresponding to more leverage. The scale changes depending on the sample size (n) and the complexity of the model so all that matters is which observations have more or less relative leverage in a particular data set. (Outliers - leverage and influence)'>leverage</a> points, cases with extremely large or small values on the x-axis.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-scatterplot}\n: Scatterplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::plot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-base-r}\n: Simple scatterplot using base R `graphics::plot()` function\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics::plot(prestige ~ income, data = Prestige)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-base-r-1.png){width=672}\n:::\n:::\n\nScatterplot of `prestige` versus `income` for the Canadian occupational-prestige data\n:::\n***\n\nThe scatterplot in @lst-chap03-scatterplot-base-r is a *summary graph* for the regression problem in which `prestige` is the response and `income` is the predictor. As our eye moves from left to right across the graph, we see how the distribution of `prestige` changes as `income` increases. In technical terms, we are visualizing the *conditional distributions* of `prestige` given the value of `income`.\n\n::::\n:::::\n\nThe overall story here is that as `income` increases, so does `prestige`, at least up to about $10,000, after which the value of `prestige` stays more or less fixed on average at about 80.\n\n\n###### car::scatterplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-car}\n: Enhanced scatterplot with `car::scatterplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::scatterplot(\n    prestige ~ income,\n    data = Prestige,\n    id = list(n = 4)\n    )\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-car-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> general.managers          lawyers        ministers       physicians \n#>                2               17               20               24\n```\n\n\n:::\n:::\n\n\nEnhanced scatterplot of prestige versus income produced by the `car::scatterplot()` function. Four points were identified using the `id` argument.\n:::\n\n***\n\n- **Points** correspond to the pairs of (`income`, `prestige`) values in the Prestige data frame, which is supplied in the data argument. \n- **The thick solid straight line** in the scatterplot is the simple linear regression of `prestige` on `income` fit by ordinary least squares (<a class='glossary' title='Ordinary least square regression (OLS) is a method of estimating a linear regression model that finds the regression line by minimizing the squared differences between each data point and the regression line. (Swr; Glossary)'>OLS</a>). \n- **The dashed line** is fit using a nonparametric *scatterplot smoother*, and it provides an estimate of the mean function that does not depend on a parametric regression model, linear or otherwise. \n- **The two dash-dotted lines** provide a nonparametric estimate of the square root of the variance function (i.e., the conditional standard deviation of the response), based on separately smoothing the positive and negative residuals from the fitted *nonparametric* mean function. \n- Also shown on each axis are **marginal boxplots** of the plotted variables, summarizing the univariate distributions of x and y. \n- The only optional argument is `id=list (n=4)`, to identify by row name the four **most extreme cases**, where by default “extreme” means farthest from the point of means using Mahalanobis distances.\n\nAll these features, and a few others that are turned off by default, can be modified by the user, including the color, size, and symbol for points; the color, thickness, and type for lines; and inclusion or exclusion of the least-squares fit, the mean smooth, variance smooth, and marginal boxplots. See help (\"scatterplot\") for the available options.\n\n\n\n::::\n:::::\n\nIn @lst-chap03-scatterplot-car the least squares line cannot match the obvious curve in the mean function that is apparent in the smooth fit. So modeling the relationship of `prestige` to `income` by simple linear regression is likely to be inappropriate.\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-resource-text}\n: Nonparametric regression as an appendix to the R Companion\n::::::\n:::\n::::{.my-resource-container}\n@lst-chap03-scatterplot-car uses as an plot enhancement in the {**car**} package a smoother, designed to help us extract information from a graph. \n\n*Nonparametric regression*, in which smoothers are substituted for more traditional regression models, is described in an [online appendix to the R Companion](https://www.john-fox.ca/Companion/appendices/Appendix-Nonparametric-Regression.pdf).\n::::\n:::::\n\n\n###### ggplot2::geom_point()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-ggplot2}\n: Scatterplot with `ggplot2::geom_point()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- carData::Prestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = income,\n            y = prestige\n        )\n    ) +\n    ggplot2::geom_point(\n        shape = \"circle open\",\n        size = 2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"loess\",\n        span = .75,\n        level = 0.95\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\",\n        se = FALSE\n    ) +\n    ggplot2::coord_cartesian(\n      xlim = c(0, 26000),\n      ylim = c(10, 90),\n      expand = TRUE,\n      default = FALSE,\n      clip = \"on\"\n    )\n\nsave_data_file(\"chap03\", gg_Prestige, \"gg_Prestige.rds\")\n\ngg_Prestige\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-ggplot2-1.png){width=672}\n:::\n:::\n\n\nScatterplot of `prestige` versus `income` produced by different functions of the {**ggplot2**} package. \n:::\n***\n\nThe default smoother employed by `ggplot2::geom_smooth()` depends on the size of the largest group. `stats::loess()` would have been used here because we have less than 1,000 observation. But I have applied the `loess() `function explicitly to prevent a warning message.\n\nThe span in loess is the fraction of the data used to determine the fitted value of y at each x. A larger span therefore produces a smoother result, and too small a span produces a fitted curve with too much wiggle. The trick is to select the smallest span that produces a sufficiently smooth regression mean function. The default span of 2/3 works well most of the time but not always\n\n\n\n\n::::\n:::::\n\nBesides the labelled points and the marginal boxplots, I could not create smoother with the similar width as in the {**car**} example. I assume it has to do with \"the *nonparametric estimate* of the square root of the variance function (i.e., the conditional standard deviation of the response), based on separately smoothing the positive and negative residuals from the fitted nonparametric mean function. \"\n\n###### categorical\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-car-categorical}\n: Conditioning on a categorical variable\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-car-categorical}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige$type <- factor(Prestige$type, levels = c(\"bc\", \"wc\", \"prof\"))\ncar::scatterplot(\n    prestige ~ income | type,\n    data = Prestige,\n    legend = list(coords = \"bottomright\", inset = 0.1),\n    smooth = list(span = 0.9),\n    col = ggokabeito::palette_okabe_ito(c(1, 3, 5))\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-car-categorical-1.png){width=672}\n:::\n\n```{.r .cell-code}\nxtabs( ~ type, data = Prestige)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> type\n#>   bc   wc prof \n#>   44   23   31\n```\n\n\n:::\n\n```{.r .cell-code}\nglue::glue(\" \")\n```\n\n \n\n```{.r .cell-code}\nglue::glue(\"bc = blue color, wc = white color, prof = professional\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> bc = blue color, wc = white color, prof = professional\n```\n\n\n:::\n:::\n\n\nScatterplot of `prestige` versus `income`, coded with {**car**} by `type` of occupation. The span of the loess smoother is set to 0.9.\n:::\n***\n\n- **The variables** for the coded scatterplot are given in a formula as `y ~ x | g`, which is interpreted as plotting y on the vertical axis, x on the horizontal axis, and marking points according to the value of g (or “y versus x given g”).\n- **The legend** for the graph, automatically generated by the scatterplot () function, is placed by default above the plot; we specify the legend argument to move the legend to the lower-right corner of the graph.\n- We select a **larger span**, span=0.9, for the scatterplot smoothers than the default (span=2/3) because of the small numbers of cases in the occupational groups.\n- As **color palette** I used the colorblind friendly Okabe Ito scale from {**ggokabeito**} instead of the default colors from {**car**} .\n\nThe default smoother employed by `car::scatterplot()` is the loess smoother. The span in loess is the fraction of the data used to determine the fitted value of y at each x. A larger span therefore produces a smoother result, and too small a span produces a fitted curve with too much wiggle. The trick is to select the smallest span that produces a sufficiently smooth regression mean function. The default span in {**car**} of 2/3 works well most of the time but not always. (In {**ggplot2**} the default span is 3/4.)\n\n::::\n:::::\n\nThe nonlinear relationship in @lst-chap03-scatterplot-car has disappeared, and we now have three reasonably linear regressions with different slopes. The slope of the relationship between `prestige` and `income` looks steepest for blue-collar occupations and least steep for professional and managerial occupations.\n\n###### categorical2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-ggplot2-categorical}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-ggplot2-categorical}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    tidyr::drop_na(type) |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = income,\n            y = prestige,\n            group = type,\n            color = type,\n            shape = type\n        ), \n    ) +\n    ggplot2::geom_point(\n        size = 2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\",\n        se = FALSE\n    ) +\n    ggplot2::stat_smooth(\n        linetype = \"dashed\",\n        formula = 'y ~ x',\n        method = \"loess\",\n        se = FALSE, \n        span = .95,\n    ) +\n    ggokabeito::scale_color_okabe_ito(\n        order = c(1, 3, 5, 2, 4, 6:9)\n    ) +\n    ggplot2::scale_shape_manual(values = 1:3)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-ggplot2-categorical-1.png){width=672}\n:::\n:::\n\n\nScatterplot of `prestige` versus `income`, coded with {**ggplot2**} by `type` of occupation. The span of the loess smoother is set to 0.95.\n:::\n\n:::::: {#tdo-chap03-scatterplot-ggplot2-categorical}\n:::::{.my-checklist}\n:::{.my-checklist-header}\nTODO: Better legend inside graphic panel\n:::\n::::{.my-checklist-container}\n- Add legend for linetype\n- Create legend of occupation type without line, just the shape\n- Put legend bottom right inside the graph panel\n::::\n:::::\nHow to improve the legend of @lst-chap03-scatterplot-ggplot2-categorical\n:::\n\n\n::::\n:::::\n\n###### Jitter (car)\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-jitter-car}\n: Scatterplots of `vocabulary` by `education` using {**car**}\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-jitter-car}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\ncar::scatterplot(vocabulary ~ education, data = Vocab, main = \"(a)\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-car-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncar::scatterplot(\n  vocabulary ~ education,\n  data = Vocab,\n  jitter = list(x = 2, y = 2),\n  cex = 0.01,\n  col = \"darkgray\",\n  smooth = list(\n    span = 1 / 3,\n    col.smooth = \"black\",\n    col.spread = \"black\"\n  ),\n  regLine = list(col = \"black\"),\n  main = \"(b)\"\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-car-2.png){width=672}\n:::\n:::\n\n\nScatterplots of vocabulary by education with {**car**}: (a) using defaults, (b) jittering the points.\n:::\n***\n\n- The argument `jitter=list (x=2, y=2)` adds small random numbers to the x and y coordinates of each plotted point. The values x=2 and y=2 specify the degree of jittering relative to the default amount, in this case twice as much jittering. The amounts of jitter used were determined by trial and error to find the choices that provide the most information. \n- The argument `cex=0.01` reduces the size of the circles for the plotted points to 1% of their normal size, and `col=\"darkgray\"` sets their color to gray, more appropriate choices when plotting more than 30,000 points. As a consequence of jittering and using smaller and lighter plotting symbols, we see clearly that the density of points for education = 12, high school graduates, is higher than for other years, and that the data for education < 8 are very sparse. \n- We use the *smooth argument* to set the span for the default loess smoother to 1/3, half the default value of 2/3. Setting a smaller span uses less data to estimate the fitted curve at each value of education, allowing us to resolve greater detail in the regression function. Here we observe a dip in the regression function when education ≈ 11, so individuals who just missed graduating from high school perform somewhat worse than expected by a straight-line fit on the vocabulary test. Similarly, there is a small positive bulge in the regression function corresponding to college graduation, approximately 16 years of education. The specifications `col.smooth=\"black\"` and `col.var=\"black\"` set the color of the loess and variability lines, making them more visible in the graph; the default is the color of the points, now gray. \n- Finally, as before, the *main argument* sets the title of the graph.\n\n::::\n:::::\n\n###### Jitter (ggplot2)\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-jitter-ggplot2}\n: Scatterplots of `vocabulary` by `education` using {**ggplot2**\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-jitter-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\nVocab |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = education,\n            y = vocabulary\n        )\n    ) +\n    ggplot2::geom_jitter(\n        color = \"grey\",\n        size = .01,\n        alpha = 0.2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"loess\",\n        span = .7,\n        level = 0.95\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\"\n    ) \n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-ggplot2-1.png){width=672}\n:::\n:::\n\n\nScatterplots of vocabulary by education with {**car**}\n:::\n\n***\n \nAt first, using `span = 0.33` as in @lst-chap03-scatterplot-jitter-car I've got many warnings that I do not understand. (The same happened with the {**car**} approach, but these warnings did not appear in the outcome.) It seems that these warnings come when there are too many identical values, e.g. when the variable behaves more like a discrete variable than a continuous variable as it would be required for a proper smoothing (see: ).\n\nDespite the advice in a StackOverflow posting [R warnings, simpleLoess, pseudoinverse etc.](https://forum.posit.co/t/r-warnings-simpleloess-pseudoinverse-etc/8651) I changed span to 0.7 and the warnings disappeared. \n\n> Increasing the `span` parameter has the effect of \"squashing out\", … the piles of repeated values where they occur. … I would definitely not increase span to achieve the squashing: it is a lot better to use a tiny amount of jitter for that purpose; span should be dictated by other considerations….\n\nChanging the width and/or height of jitter didn't remove the warnings, but I got the advise in the warnings that I should enlarge `span`.\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\nThe {**car**} packages has the ability to display \"extreme\" points, mostly defined by the <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distance. Unlike simple Euclidean distances, which are inappropriate when the variables are scaled in different units, Mahalanobis distances take into account the variation and correlation of x and y.\n\n> The Mahalanobis distance (MD) is the distance between two points in multivariate space. In a regular Euclidean space, variables (e.g. x, y, z) are represented by axes drawn at right angles to each other; The distance between any two points can be measured with a ruler. For uncorrelated variables, the Euclidean distance equals the MD. However, if two or more variables are correlated, the axes are no longer at right angles, and the measurements become impossible with a ruler. In addition, if you have more than three variables, you can’t plot them in regular 3D space at all. The MD solves this measurement problem, as it measures distances between points, even correlated points for multiple variables. [@glenn2017]\n\n#### Scatterplots enhanced with marginal plots {#sec-chap03-2-1-1}\n\nTo reproduce the marginal boxplots without {**car**} and using the {**tidyverse**} approach I learned about the {**ggExtra**} package.\nIt now only allows scatterplots with marginal boxplots but also with histograms, density, densigram (a histogram overlaid with a density distribution) and violins.\n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-chap03-marginal-plots}\n: Using {ggExtra} for adding marginal graphs to scatterplots\n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n###### boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-marginal-boxplot}\n: Scatterplot of `prestige` versus `income` with marginal boxplots\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-marginal-boxplot}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- base::readRDS(\"data/chap03/gg_Prestige.rds\")\n\n\nggExtra::ggMarginal(gg_Prestige, type = \"boxplot\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/marginal-boxplot-1.png){width=672}\n:::\n:::\n\n  \nScatterplot of `prestige` versus `income` with marginal boxplots\n:::\n\n\n::::\n:::::\n\n###### histogram\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-marginal-histogram}\n: Scatterplot of `prestige` versus `income` with marginal histograms\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-marginal-histogram}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- base::readRDS(\"data/chap03/gg_Prestige.rds\")\n\n\nggExtra::ggMarginal(gg_Prestige, type = \"histogram\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/marginal-histogram-1.png){width=672}\n:::\n:::\n\n  \nScatterplot of `prestige` versus `income` with marginal histograms\n:::\n\n\n::::\n:::::\n\n###### density\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-marginal-density}\n: Scatterplot of `prestige` versus `income` with marginal density distribution\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-marginal-density}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- base::readRDS(\"data/chap03/gg_Prestige.rds\")\n\n\nggExtra::ggMarginal(gg_Prestige, type = \"density\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/marginal-density-1.png){width=672}\n:::\n:::\n\n  \nScatterplot of `prestige` versus `income` with marginal density distribution\n:::\n\n\n::::\n:::::\n\n###### densigram\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-marginal-densigram}\n: Scatterplot of `prestige` versus `income` with marginal densigrams\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-marginal-densigram}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- base::readRDS(\"data/chap03/gg_Prestige.rds\")\n\n\nggExtra::ggMarginal(gg_Prestige, type = \"densigram\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `after_stat(density)` instead.\n#> ℹ The deprecated feature was likely used in the ggExtra package.\n#>   Please report the issue at <https://github.com/daattali/ggExtra/issues>.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/marginal-densigram-1.png){width=672}\n:::\n:::\n\n  \nScatterplot of `prestige` versus `income` with marginal densigrams\n:::\n\nI reported that `..density..` was deprecated since {**ggplot2**} 3.4.0. (See [my comment](https://github.com/daattali/ggExtra/issues/175#issuecomment-2149784674))\n\n\n::::\n:::::\n\n###### violin\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-marginal-violin}\n: Scatterplot of `prestige` versus `income` with marginal violin plots\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-marginal-violin}\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_Prestige <- base::readRDS(\"data/chap03/gg_Prestige.rds\")\n\n\nggExtra::ggMarginal(gg_Prestige, type = \"violin\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/marginal-violin-1.png){width=672}\n:::\n:::\n\n  \nScatterplot of `prestige` versus `income` with marginal violin plots\n:::\n\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\n#### Scatterplot enhanced with point labelling {#sec-chap03-2-1-2}\n\nThe\t`car::scatterplot()` function can\tdraw\tscatterplots with\ta\twide variety of enhancements and options. One enhancement is to include marginal plots as I have done with the use of {**ggExtra**} in the previous section @sec-chap03-2-1-1.\n\nAnother enhancement is to label \"extreme\" points with different measures and in different conditions. I have already developed this enhancement for \n\n- Outliers in boxplots using 1.5 times the <a class='glossary' title='The interquartile range (IQR) is the upper and lower boundaries around the middle 50% of the data in a numeric variable or the difference between the upper and lower boundaries around the middle 50% of the data in a numeric variable. (SwR, Glossary)'>IQR</a>  subtracting to the lower quartile (.25) and adding to the upper quartile (.75) (see: @lst-chap03-compute-boxplot-outliers) and for\n- <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distances using p-values < .001 (see: @lst-chap04-davis-ggrepel).\n\nHere now I will not use the <a class='glossary' title='The p-value is the probability that the test statistic is at least as big as it is under the null hypothesis (SwR, Glossary)'>p-value</a> for the Mahalanobis distances but a fix amount of points to label. To go conform with the example I will at first apply a fixed `n = 4` but in the next challenge I will try to develop a general function that distinguishes between type (scatterplot, boxplot) and method (p-value, fixed number of points).\n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-chap03-replicating-books-figure-3-8}\n: Label 4 points of farest Mahalanobis distances in scatterplots \n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n\n\n###### labelled-4 \n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-prestige-labelled-n-points}\n: Scatterplot\tof\t`prestige`\tversus\t`income`\twith four\tpoints\tidentified\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-prestige-labelled-n-points}\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(420)\ndf_temp <- carData::Prestige |> \n  dplyr::select(prestige, income) |> \n  tidyr::drop_na() \n\ndf <- df_temp |>\n  dplyr::mutate(mahal =\n        {\n          stats::mahalanobis(\n                df_temp,\n                base::colMeans(df_temp),\n                stats::cov(df_temp)\n                )\n        }\n  ) |>\n  dplyr::mutate(p =\n    pchisq(\n      q = mahal,\n      df = 1,\n      lower.tail = FALSE\n      )\n    ) |>\n  tibble::rownames_to_column(var = \"ID\") |>\n  dplyr::mutate(label = \"\") |> \n  dplyr::arrange(desc(mahal)) |> \n  dplyr::mutate(label =\n      dplyr::case_when(dplyr::row_number() <= 4 ~ ID)\n)\n  \ngg_enhanced <- df |>\n  ggplot2::ggplot(\n        ggplot2::aes(\n                x = income,\n                y = prestige\n        )\n  ) +\n  ggplot2::geom_point(\n    shape = 1,\n    size = 2\n  ) +\n  ggrepel::geom_text_repel(\n    ggplot2::aes(label = label),\n    na.rm = TRUE\n  ) +\n  ggplot2::stat_smooth(\n    ggplot2::aes(linetype = \"solid\"),\n    formula = y ~ x,\n    method = lm,\n    se = FALSE,\n    color = \"black\"\n  ) +\n    ggplot2::geom_smooth(\n      ggplot2::aes(\n          linetype = \"dashed\"\n        ),\n      formula = y ~ x,\n      method = loess,\n      se = TRUE,\n      color = \"black\"\n  ) +\n  ggplot2::scale_linetype_discrete(\n    name = \"\",\n    label = c(\n      \"Least Squares\",\n      \"Unbiased Reporting   \"\n    )\n  ) +\n  ggplot2::guides(\n    linetype = ggplot2::guide_legend(position = \"inside\")\n  ) +\n  ggplot2::theme(\n    legend.title = ggplot2::element_blank(),\n    legend.position.inside = c(.8, .15),\n    legend.box.background = ggplot2::element_rect(\n                              color = \"black\",\n                              linewidth = 1\n                              )\n                 )\n\nggExtra::ggMarginal(p = gg_enhanced, type = \"boxplot\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/prestige-labelled-4-points-1.png){width=672}\n:::\n:::\n\n\nReplication of book’s Figure 3.8 with {**ggplot2**}, {**ggrepel**} and {**ggExtra**}.\n:::\n***\n\nThis is my attempt to replicate book’s Figure 3.8. Instead of using functions of tthe he {**car**} package I used packages from the {**tidyverse**} approach: {**gplot2**} with {**ggrepel**} and {**ggExtra**} (see @pak-ggrepel and @pak-ggExtra). \n\n\n\n::::\n:::::\n\nUsing the <a class='glossary' title='The p-value is the probability that the test statistic is at least as big as it is under the null hypothesis (SwR, Glossary)'>p-value</a> of .001 we would get 5 (instead of 4) points labelled.\n\n###### function\n\n**Still to do!**\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-ID-text}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chaplisting-ID}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_find_boxplot_outlier <- function(df) {\n  return(df < quantile(df, .25) - 1.5*IQR(df) | df > quantile(df, .75) + 1.5*IQR(df))\n  \nmy_find_boxplot_outlier(carData::Prestige$income)\n\nprestige1 <- Prestige |> \n  dplyr::mutate(outlier = my_find_boxplot_outlier(income)) |> \n  tibble::rownames_to_column(var = \"ID\") |>\n  dplyr::mutate(outlier =\n        dplyr::case_when(outlier == TRUE ~ ID,\n                         outlier == FALSE ~ \"\")\n  )\n\n}\n\n# label_points <-  function(\n#     df, \n#     n = 2, \n#     type = c(\"scatterplot\", \"boxplot\"),\n#     output = c(\"dataframe\", \"labels\", \"both\")\n#     ) {\n#     if (type == \"scatterplot\") {\n#           df |>\n#           dplyr::mutate(mahal =\n#                 {\n#                   stats::mahalanobis(\n#                         df,\n#                         base::colMeans(df),\n#                         stats::cov(df)\n#                         )\n#                 }\n#           )\n#       } |>\n#     if (n == 0) ( {\n#         dplyr::mutate(p =\n#           pchisq(\n#             q = mahal,\n#             df = 1,\n#             lower.tail = FALSE\n#             )\n#           ) \n#       } ) |>\n#       tibble::rownames_to_column(var = \"ID\") |>\n#       dplyr::mutate(label = \"\") |> \n#       dplyr::arrange(desc(mahal)) |> \n#       if (n != 0) (\n#         dplyr::mutate(\n#           label = dplyr::case_when(dplyr::row_number() <= 4 ~ ID)\n#           )\n#       ) \n# }\n\n\nset.seed(420)\ndf_temp <- carData::Prestige |> \n  dplyr::select(prestige, income) |> \n  tidyr::drop_na()\n\ntest <-  label_points(\n  df = df_temp,\n  n = 4,\n  type = \"scatterplot\",\n  output = \"dataframe\")\n```\n:::\n\n\nListing title\n:::\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\n\n\n### Parallel boxplots {#sec-chap03-2-2}\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-parallel-boxplots}\n: Parallel boxplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::boxplot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-parallel-boxplot-base-r}\n: Parallel boxplots with `graphics::boxplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-parallel-boxplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\ngraphics::boxplot(vocabulary ~ education, data = Vocab)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/parallel-boxplot-base-r-1.png){width=672}\n:::\n:::\n\nBoxplots with `graphics::boxplot()` of `vocabulary` separately for each value of years of `education.`\n:::\n\n::::\n:::::\n\n\n###### car::Boxplot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-parallel-boxplot-car}\n: Parallel boxplots with `car::Boxplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-parallel-boxplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::Boxplot(vocabulary ~ education, data = Vocab, id = FALSE)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/parallel-boxplot-car-1.png){width=672}\n:::\n:::\n\nBoxplots with `car::Boxplot()` of `vocabulary` separately for each value of years of `education.`\n:::\n\n***\nThis command draws a separate boxplot for vocabulary for all cases with the same value of education, so we condition on the value of education. The formula has the response variable on the left of the `~` and a discrete conditioning variable — typically, but not necessarily, a factor — on the right.\n\nSetting `id = FALSE` prevents labelling up to ten outliers, which would be very distracting because of the many boxplots. Therefore we get using `car::Boxplot()` an identical graph as in @lst-chap03-parallel-boxplot-base-r with the base R version of `graphics::boxplot()`.\n\nWith `xtabs(~ education, data = Vocab)` we get the distribution of education:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ education, data = Vocab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> education\n#>    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15 \n#>   43   12   44   78  106  137  335  361 1188  894 1335 1726 9279 2591 3447 1416 \n#>   16   17   18   19   20 \n#> 4090  954 1150  451  714\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\nIn this example, the conditioning predictor education is a discrete numeric variable. For the subsamples with larger sample sizes, 8 ≤ education ≤ 18, rather than a steady increase in vocabulary with education, there appear to be jumps every 2 or 3 years, at years 10, 12, 15, and 18.\n\n###### Ornstein\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-canadian-directorats}\n: Interlocking directorates\tamong\t248\tmajor\tCanadian\tcorporations\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-canadian-directorats}\n\n::: {.cell}\n\n```{.r .cell-code}\ncar::brief(carData::Ornstein)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> 248 x 4 data.frame (243 rows omitted)\n#>     assets sector nation interlocks\n#>        [i]    [f]    [f]        [i]\n#> 1   147670    BNK    CAN         87\n#> 2   133000    BNK    CAN        107\n#> 3   113230    BNK    CAN         94\n#> . . .                                   \n#> 247    119    AGR    CAN          6\n#> 248     62    MIN    US           0\n```\n\n\n:::\n:::\n\n\nBrief summary of the Ornstein data set about \"Interlocking Directorates Among Major Canadian Firms\"\n:::\n\n***\n\nThe variables in the data set include the assets of each corporation, in millions of dollars; the corporation’s sector of operation, a factor with 10 levels; the factor nation, indicating the country in which the firm is controlled, with levels \"CAN\" (Canada), \"OTH\" (other), \"UK\", and \"US\"; and interlocks, the number of interlocking directorate and executive positions maintained between each company and others in the data set.\n\n::::\n:::::\n\n###### boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-ornstein-boxplot}\n: Parallel boxplots of interlocks by nation of control\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-ornstein-boxplot}\n\n::: {.cell}\n\n```{.r .cell-code}\nOrnstein <- carData::Ornstein\n\ncar::Boxplot(\n  interlocks ~ nation, \n  data = Ornstein, \n  main = \"(a)\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/ornstein-boxplot-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"1\"  \"2\"  \"3\"  \"5\"  \"6\"  \"9\"  \"13\" \"27\"\n```\n\n\n:::\n:::\n\n\nParallel boxplots of interlocks by nation of control, for Ornstein’s interlocking-directorate data.\n:::\n\n***\n\nBecause the names of the companies are not given in the original data source, the points are labeled by case numbers. The firms are in descending order by assets, and thus the identified points are among the largest companies.\n\n::::\n:::::\n\n###### errorbars\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-plotrix-errorbars}\n: A mean/standard deviation plot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-plotrix-errorbars}\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- car::Tapply(interlocks ~ nation, mean, data = Ornstein)\nsds <- car::Tapply(interlocks ~ nation, sd, data = Ornstein)\n\nplotrix::plotCI(\n  1:4,\n  means,\n  sds,\n  xaxt = \"n\",\n  xlab = \"Nation of Control\",\n  ylab = \"interlocks\",\n  main = \"(b)\",\n  ylim = range(Ornstein$interlocks)\n)\nlines(1:4, means)\naxis(1, at = 1:4, labels = names(means))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/plotrix-errorbars-1.png){width=672}\n:::\n:::\n\n\nA mean/standard deviation plot for Ornstein’s interlocking-directorate data\n:::\n\n***\n\n- The `car::Tapply()` function adds a formula interface to the standard `base::tapply()` function. \n- The first call to `car::Tapply()` computes the mean of interlocks for each level of nation, and the second computes within-nation standard deviations. \n- The basic graph is drawn by `plotrix::plotCI()`. The first argument to this function specifies the coordinates on the horizontal axis, the second the coordinates on the vertical axis, and the third the vector of SDs. \n- The standard graphical argument `xaxt=\"n\"` suppresses the x-axis tick marks and labels, and the ylim argument is used here to match the vertical axis of panel (b) to that of panel (a). \n- The `graphics::lines()` function joins the means, and the `graphics::axis()` function labels the horizontal axis with the names of the groups. \n- The first argument to `graphics::axis()` specifies the side of the graph where the axis is to be drawn: `side = 1` (as in the example) is below the graph, 2 at the left, 3 above, and 4 at the right.\n\n::::\n:::::\n\nWe discourage the use of bar charts for means because interpretation of the length of the bars, and therefore the visual metaphor of the graph, depends on whether or not a meaningful origin (zero) exists for the measured variable and whether or not the origin is included in the graph. \n\nThe error bars can also lead to misinterpretation, because neither standard-error bars nor standard-deviation bars are the appropriate measure of variation for comparing means between groups: They make no allowance or correction for multiple testing, among other potential problems.\n\nSo is the mean/SD graph misleading because rather than showing the outliers, the graph inflates both the means and the SDs, particularly for Canada, and disguises the skewness that is obvious in the boxplots.\n\n\n\n:::\n\n::::\n:::::\n\n### More on the graphics::plot() command {#sec-chap03-2-3}\n\n- There are different option to call the plot() function:\n  - **Basic scatterplot**: `plot(y ~ x)` or `plot(x, y)` with x on the horizontal and y on the vertical axis. \n  - **Including reference to data**: `plot(y ~ x, data = D)`,\t`plot(D$x, D$y)`,\tor\t`with(D, plot(x, y)`.\n  - **Index plot**: `plot(x)` produces a scatterplot with x on the *vertical* axis and case numbers of the horizontal axis.\n  - **Boxplot**: `plot(y ~ factor)` is the same as `boxplot(y ~ factor)` using the standard `graphics::boxplot()` function and not  `car::Boxplot()`.\n  -**Model plots**: Depending on the type of object, for instance with a `lm`-object `plot(model-object)` draws several graphs that are commonly associated with linear regression models fit by least squares. In contrast, `plot(density(x))` draws a plot of the density estimate for the numeric variable x.\n  \nThe `plot()` function can take many additional optional arguments that control the appearance of the graph, the labeling of its axes, the fonts used, and so on. We can set some of these options globally with the `par()` function or just for the current graph via arguments to the `plot()` function. But the parameter names are not very intuitive (e.g., `cex` (magnifying plotting text and symbols, or `crt` rotating of single characters etc.) \n\nPlots can be built up sequentially by first creating a basic graph and then adding to it. \n\n::: {.callout-note #nte-chap03-plot-vs.ggplot2}\nGenerally I prefer the {**ggplot2**} over the base R `plot()` function. But it is important to be able to understand graphs developed with `graphics::plot()` as they appear quite often in examples and textbooks.\n:::\n\n## Examining multivariate data {#sec-chap03-3}\n\nBecause we can only perceive objects in three spatial dimensions, examining multivariate data is intrinsically more difficult than examining univariate or bivariate data.\n\n### Three-dimensional plots {#sec-chap03-3-1}\n\nPerspective, motion, and illumination can convey a sense of depth, enabling us to examine data in three dimensions on a two-dimensional computer display. The most effective software of this kind allows the user to rotate the display, to mark points, and to plot surfaces such as regression mean functions. The {**rgl**} package (@rgl) links R to the [OpenGL](https://www.opengl.org/) threedimensional graphics library often used in animated films. The `car::scatter3d()` function {**rgl**} to provide a three-dimensional generalization of the `car::scatterplot()` function.\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-3d-scatter}\n: Three-dimensional\tscatterplot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-3d-scatter}\n\n::: {.cell}\n\n```{.r .cell-code}\nDuncan <- carData::Duncan\n\ncar::scatter3d(prestige\t~ income + education,\t\n               data = Duncan,\t\n               id = list(n = 3)\n               )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required namespace: rgl\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required namespace: MASS\n```\n\n\n:::\n\n```{.r .cell-code}\nrgl::rglwidget()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"rgl20278\" style=\"width:100%;height:464px;\" class=\"rglWebGL html-widget\" role=\"img\" aria-labelledby=\"rgl20278-aria\"></div>\n<script type=\"application/json\" data-for=\"rgl20278\">{\"x\":{\"material\":{\"color\":\"#000000\",\"alpha\":1,\"lit\":true,\"ambient\":\"#000000\",\"specular\":\"#FFFFFF\",\"emission\":\"#000000\",\"shininess\":50,\"smooth\":true,\"front\":\"filled\",\"back\":\"filled\",\"size\":3,\"lwd\":1,\"fog\":true,\"point_antialias\":false,\"line_antialias\":false,\"texture\":null,\"textype\":\"rgb\",\"texmode\":\"modulate\",\"texmipmap\":false,\"texminfilter\":\"linear\",\"texmagfilter\":\"linear\",\"texenvmap\":false,\"depth_mask\":true,\"depth_test\":\"less\",\"isTransparent\":false,\"polygon_offset\":[0,0],\"margin\":\"\",\"floating\":false,\"tag\":\"\",\"blend\":[\"src_alpha\",\"one_minus_src_alpha\"]},\"rootSubscene\":1,\"objects\":{\"10\":{\"id\":10,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"0\",\"colors\":\"1\",\"texts\":[[\"7\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"2\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"11\":{\"id\":11,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"3\",\"colors\":\"4\",\"texts\":[[\"80\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"5\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"12\":{\"id\":12,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"6\",\"colors\":\"7\",\"texts\":[[\"7\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"8\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"13\":{\"id\":13,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"9\",\"colors\":\"10\",\"texts\":[[\"100\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"11\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"14\":{\"id\":14,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"12\",\"colors\":\"13\",\"texts\":[[\"3\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"14\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"15\":{\"id\":15,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"15\",\"colors\":\"16\",\"texts\":[[\"100\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"17\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"16\":{\"id\":16,\"type\":\"spheres\",\"material\":{},\"vertices\":\"18\",\"colors\":\"19\",\"radii\":[[0.01957433857023716]],\"centers\":\"20\",\"ignoreExtent\":false,\"fastTransparency\":true,\"flags\":32771},\"17\":{\"id\":17,\"type\":\"lines\",\"material\":{\"lit\":false},\"vertices\":\"21\",\"colors\":\"22\",\"centers\":\"23\",\"ignoreExtent\":false,\"flags\":32832},\"18\":{\"id\":18,\"type\":\"lines\",\"material\":{\"lit\":false},\"vertices\":\"24\",\"colors\":\"25\",\"centers\":\"26\",\"ignoreExtent\":false,\"flags\":32832},\"19\":{\"id\":19,\"type\":\"lines\",\"material\":{\"lit\":false},\"vertices\":\"27\",\"colors\":\"28\",\"centers\":\"29\",\"ignoreExtent\":false,\"flags\":32832},\"20\":{\"id\":20,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"30\",\"colors\":\"31\",\"texts\":[[\"income\"]],\"cex\":[[1]],\"adj\":[[1,0.5,0.5]],\"centers\":\"32\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"21\":{\"id\":21,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"33\",\"colors\":\"34\",\"texts\":[[\"prestige\"]],\"cex\":[[1]],\"adj\":[[1,0.5,0.5]],\"centers\":\"35\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"22\":{\"id\":22,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"36\",\"colors\":\"37\",\"texts\":[[\"education\"]],\"cex\":[[1]],\"adj\":[[1,0.5,0.5]],\"centers\":\"38\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"23\":{\"id\":23,\"type\":\"surface\",\"material\":{\"alpha\":0.4980392158031464,\"lit\":false,\"isTransparent\":true},\"vertices\":\"39\",\"colors\":\"40\",\"dim\":[[26,26]],\"centers\":\"41\",\"ignoreExtent\":false,\"flipped\":true,\"flags\":32810},\"24\":{\"id\":24,\"type\":\"surface\",\"material\":{\"alpha\":0.4980392158031464,\"lit\":false,\"front\":\"lines\",\"back\":\"lines\",\"isTransparent\":true},\"vertices\":\"42\",\"colors\":\"43\",\"dim\":[[26,26]],\"centers\":\"44\",\"ignoreExtent\":false,\"flipped\":true,\"flags\":32810},\"25\":{\"id\":25,\"type\":\"lines\",\"material\":{\"lit\":false},\"vertices\":\"45\",\"colors\":\"46\",\"centers\":\"47\",\"ignoreExtent\":false,\"flags\":32832},\"26\":{\"id\":26,\"type\":\"text\",\"material\":{\"lit\":false},\"vertices\":\"48\",\"colors\":\"49\",\"texts\":[[\"minister\"],[\"RR.engineer\"],[\"conductor\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"50\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":false,\"flags\":33808},\"5\":{\"id\":5,\"type\":\"light\",\"vertices\":[[0,0,1]],\"colors\":[[1,1,1,1],[1,1,1,1],[1,1,1,1]],\"viewpoint\":true,\"finite\":false},\"4\":{\"id\":4,\"type\":\"background\",\"material\":{},\"colors\":\"51\",\"centers\":\"52\",\"sphere\":false,\"fogtype\":\"none\",\"fogscale\":1,\"flags\":32768},\"6\":{\"id\":6,\"type\":\"background\",\"material\":{\"lit\":false,\"back\":\"lines\"},\"colors\":\"53\",\"centers\":\"54\",\"sphere\":false,\"fogtype\":\"none\",\"fogscale\":1,\"flags\":32768},\"9\":{\"id\":9,\"type\":\"background\",\"material\":{\"lit\":false,\"back\":\"lines\"},\"colors\":\"55\",\"centers\":\"56\",\"sphere\":false,\"fogtype\":\"exp2\",\"fogscale\":1,\"flags\":32768},\"1\":{\"id\":1,\"type\":\"subscene\",\"par3d\":{\"antialias\":8,\"FOV\":60,\"ignoreExtent\":false,\"listeners\":1,\"mouseMode\":{\"none\":\"none\",\"left\":\"polar\",\"right\":\"zoom\",\"middle\":\"fov\",\"wheel\":\"pull\"},\"observer\":[0,0,1.900125861167908],\"modelMatrix\":[[1,0,0,-0.4847871363162994],[0,0.9659258127212524,-0.258819043636322,-0.3333426117897034],[0,0.258819043636322,0.9659258127212524,-2.491333246231079],[0,0,0,1]],\"projMatrix\":[[1.732050895690918,0,0,0],[0,1.732050895690918,0,0],[0,0,-2.000000238418579,-2.850188732147217],[0,0,-1,0]],\"skipRedraw\":false,\"userMatrix\":[[1,0,0,0],[0,0.9659258127212524,-0.258819043636322,0],[0,0.258819043636322,0.9659258127212524,0],[0,0,0,1]],\"userProjection\":[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],\"scale\":[1,1,1],\"viewport\":{\"x\":0,\"y\":0,\"width\":1,\"height\":1},\"zoom\":1,\"bbox\":[-0.05000000074505806,1.019574284553528,-0.1000000014901161,1.049999952316284,-0.05000000074505806,1.019574284553528],\"windowRect\":[0,0,256,256],\"family\":\"sans\",\"font\":1,\"cex\":1,\"useFreeType\":true,\"fontname\":\"NULL\",\"maxClipPlanes\":2147483647,\"glVersion\":\"NA\",\"activeSubscene\":0},\"embeddings\":{\"viewport\":\"replace\",\"projection\":\"replace\",\"model\":\"replace\",\"mouse\":\"replace\"},\"objects\":[9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,5],\"subscenes\":[],\"flags\":34171}},\"crosstalk\":{\"key\":[],\"group\":[],\"id\":[],\"options\":[]},\"width\":672,\"height\":480,\"buffer\":{\"accessors\":[{\"bufferView\":0,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":1,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":2,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":3,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":4,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":5,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":6,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":7,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":8,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":9,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":10,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":11,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":12,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":13,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":14,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":15,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":16,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":17,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":18,\"componentType\":5126,\"count\":45,\"type\":\"VEC3\"},{\"bufferView\":19,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":20,\"componentType\":5126,\"count\":45,\"type\":\"VEC3\"},{\"bufferView\":21,\"componentType\":5121,\"count\":2,\"type\":\"VEC3\"},{\"bufferView\":22,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":23,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":24,\"componentType\":5121,\"count\":2,\"type\":\"VEC3\"},{\"bufferView\":25,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":26,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":27,\"componentType\":5121,\"count\":2,\"type\":\"VEC3\"},{\"bufferView\":28,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":29,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":30,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":31,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":32,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":33,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":34,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":35,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":36,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":37,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":38,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":39,\"componentType\":5126,\"count\":676,\"type\":\"VEC3\"},{\"bufferView\":40,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":41,\"componentType\":5126,\"count\":625,\"type\":\"VEC3\"},{\"bufferView\":42,\"componentType\":5126,\"count\":676,\"type\":\"VEC3\"},{\"bufferView\":43,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":44,\"componentType\":5126,\"count\":625,\"type\":\"VEC3\"},{\"bufferView\":45,\"componentType\":5126,\"count\":90,\"type\":\"VEC3\"},{\"bufferView\":46,\"componentType\":5121,\"count\":90,\"type\":\"VEC4\",\"normalized\":true},{\"bufferView\":47,\"componentType\":5126,\"count\":45,\"type\":\"VEC3\"},{\"bufferView\":48,\"componentType\":5126,\"count\":3,\"type\":\"VEC3\"},{\"bufferView\":49,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":50,\"componentType\":5126,\"count\":3,\"type\":\"VEC3\"},{\"bufferView\":51,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":52,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":53,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":54,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":55,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":56,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"}],\"bufferViews\":[{\"buffer\":0,\"byteLength\":12,\"byteOffset\":0},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":12},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":28},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":40},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":52},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":68},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":80},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":92},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":108},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":120},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":132},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":148},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":160},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":172},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":176},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":188},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":200},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":204},{\"buffer\":0,\"byteLength\":540,\"byteOffset\":216},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":756},{\"buffer\":0,\"byteLength\":540,\"byteOffset\":760},{\"buffer\":0,\"byteLength\":6,\"byteOffset\":1300},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":1308},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":1324},{\"buffer\":0,\"byteLength\":6,\"byteOffset\":1336},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":1342},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":1348},{\"buffer\":0,\"byteLength\":6,\"byteOffset\":1360},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":1368},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":1384},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":1396},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":1400},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":1416},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":1420},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":1432},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":1436},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":1448},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":1452},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":1468},{\"buffer\":0,\"byteLength\":8112,\"byteOffset\":1472},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":9584},{\"buffer\":0,\"byteLength\":7500,\"byteOffset\":9600},{\"buffer\":0,\"byteLength\":8112,\"byteOffset\":17100},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":25212},{\"buffer\":0,\"byteLength\":7500,\"byteOffset\":25228},{\"buffer\":0,\"byteLength\":1080,\"byteOffset\":32728},{\"buffer\":0,\"byteLength\":360,\"byteOffset\":33808},{\"buffer\":0,\"byteLength\":540,\"byteOffset\":34168},{\"buffer\":0,\"byteLength\":36,\"byteOffset\":34708},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":34744},{\"buffer\":0,\"byteLength\":36,\"byteOffset\":34748},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":34784},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":34800},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":34803},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":34807},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":34810},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":34814}],\"buffers\":[{\"byteLength\":34817,\"bytes\":\"AAAAAM3MTL0AAAAAjIsLPwAAAACMiws/AACAPwAAAADNzEy9AAAAAGGKfD/NzEy9AAAAAIyL\\nCz8AAAAAjIsLPwAAgD9hinw/zcxMvQAAAAAAAAAAzczMvQAAAAAAAAAAjIsLP4yLCz8AAIA/\\nAAAAAM3MzL0AAAAAAAAAAM3MzL0AAIA/AAAAAIyLCz+Miws/AACAPwAAAADNzMy9AACAP83M\\nTL0AAAAAzcxMvQAAAAHNzEy9AAAAAM3MTL3NzEy9AACAP83MTL0AAAABzcxMvQAAgD/NzEy9\\nMEU+P65+UD9edlk/aN1gP08iUz987z0/RT5rP7abZT9/+mk/1g0mP+ioQD8eeWQ/bzBFP7ab\\nZT9edlk/0LpBPtOwXT/99FM/bzBFP5mGbT8vu2w/YYp8P7abZT8AAIA/TJFPP9BRAT8ON1w/\\naN1gP3RUYD9edlk/gynyPvWDDj8cbjg/5LNuPxX4Yj+gfno/5LNuPx0VeD/vvXc/RT7rPjfL\\nEz/99FM/fdYNPwW+OD/OOWc/5LNuPwW+uD4ppZQ+mCIfP+ioQD9NNNE+8lk3Pw3bTT+44QY/\\ngynyPtOw3T7tsss+I591P/jiaj+dc04/WjeYPkcFvj677DI/fdYNP/2goz4IIQQ/1g0mP8uT\\nyD4LLDA/WjeYPrM8CT4vu+w+0LpBPrtZnj4LLDA+3WAKP3H1Az8LLLA+AACAPz/oKD/OOWc+\\nDqbIPvWDDj9pook+TJFPPtvNcj5KKSU+AAAAP7M8iT6MMUY+yWfdPTfLkz2PPHI+AAAAAF9c\\n/T0AAAAAgynyPj/oKD5NNFE+yWfdPDfLkz0IIQQ+0LpBPk8i0z0LLLA90LpBPtOwXT7JIw8+\\nwhT5PcN2Mz5NNFE+whT5PT/oKD3OOWc+yWfdPAAAAAAON9w90LrBPbM8CT5KKSU+3WCKPV9c\\n/TxQP30+3WAKPj/oqD2MMUY+AAAAAE8iUz3JIw8+kc+6PsuTyD4ON9w+yWddPDfLkz1pook+\\nAQEAATBFPj+uflA/XnZZP2jdYD9PIlM/fO89P0U+az+2m2U/f/ppP9YNJj/oqEA/HnlkP28w\\nRT+2m2U/XnZZP9C6QT7TsF0//fRTP28wRT+Zhm0/L7tsP2GKfD+2m2U/AACAP0yRTz/QUQE/\\nDjdcP2jdYD90VGA/XnZZP4Mp8j71gw4/HG44P+Szbj8V+GI/oH56P+Szbj8dFXg/7713P0U+\\n6z43yxM//fRTP33WDT8Fvjg/zjlnP+Szbj8Fvrg+KaWUPpgiHz/oqEA/TTTRPvJZNz8N200/\\nuOEGP4Mp8j7TsN0+7bLLPiOfdT/44mo/nXNOP1o3mD5HBb4+u+wyP33WDT/9oKM+CCEEP9YN\\nJj/Lk8g+CywwP1o3mD6zPAk+L7vsPtC6QT67WZ4+CywwPt1gCj9x9QM/CyywPgAAgD8/6Cg/\\nzjlnPg6myD71gw4/aaKJPkyRTz7bzXI+SiklPgAAAD+zPIk+jDFGPsln3T03y5M9jzxyPgAA\\nAABfXP09AAAAAIMp8j4/6Cg+TTRRPsln3Tw3y5M9CCEEPtC6QT5PItM9CyywPdC6QT7TsF0+\\nySMPPsIU+T3DdjM+TTRRPsIU+T0/6Cg9zjlnPsln3TwAAAAADjfcPdC6wT2zPAk+SiklPt1g\\nij1fXP08UD99Pt1gCj4/6Kg9jDFGPgAAAABPIlM9ySMPPpHPuj7Lk8g+DjfcPslnXTw3y5M9\\naaKJPgAAAAEAAAAAjIsLPwAAAACMiws/AACAPwAAAD8AAAAAAAAAAAAAAAABAAAAAAEAAAAA\\nAAAAAAA/AAAAAAAAAAAAAQAAAAAAAIyLCz+Miws/AACAPwAAAAAAAAAAAAAAPwEAAACMiws/\\nAAAAAIyLCz8AAIA/AQAAAAAAAABmZoY/AAAAAAAAAAEAAAAAZmaGPwAAAAAAAAEAAAAAAIyL\\nCz+Miws/AACAPwAAAQAAAAAA1M4xvAAAAAAK1yM9VBPzOwAAAAAK16M9FHHSPAAAAACPwvU9\\nqQ40PQAAAAAK1yM+yeR+PQAAAADNzEw+dN2kPQAAAACPwnU+hEjKPQAAAAApXI8+lLPvPQAA\\nAAAK16M+Uo8KPgAAAADsUbg+2kQdPgAAAADNzMw+YfovPgAAAACuR+E+6a9CPgAAAACPwvU+\\ncWVVPgAAAAC4HgU/+RpoPgAAAAApXA8/gdB6PgAAAACamRk/BMOGPgAAAAAK1yM/yB2QPgAA\\nAAB7FC4/jHiZPgAAAADsUTg/UNOiPgAAAABcj0I/FC6sPgAAAADNzEw/2Ii1PgAAAAA9Clc/\\nnOO+PgAAAACuR2E/YD7IPgAAAAAfhWs/JJnRPgAAAACPwnU/6PPaPgAAAAAAAIA/rE7kPgAA\\nAAAAAAAAlyglPArXIz0K1yM9ikDoPArXIz0K16M9ZfY+PQrXIz2PwvU9QuaEPQrXIz0K1yM+\\nUlGqPQrXIz3NzEw+YrzPPQrXIz2PwnU+cSf1PQrXIz0pXI8+QEkNPgrXIz0K16M+yP4fPgrX\\nIz3sUbg+ULQyPgrXIz3NzMw+2GlFPgrXIz2uR+E+YB9YPgrXIz2PwvU+6NRqPgrXIz24HgU/\\ncIp9PgrXIz0pXA8//B+IPgrXIz2amRk/wHqRPgrXIz0K1yM/hNWaPgrXIz17FC4/SDCkPgrX\\nIz3sUTg/DIutPgrXIz1cj0I/z+W2PgrXIz3NzEw/k0DAPgrXIz09Clc/V5vJPgrXIz2uR2E/\\nG/bSPgrXIz0fhWs/31DcPgrXIz2PwnU/o6vlPgrXIz0AAIA/ZwbvPgrXIz0AAAAAABD+PArX\\noz0K1yM9IN5JPQrXoz0K16M9IFqKPQrXoz2PwvU9L8WvPQrXoz0K1yM+PzDVPQrXoz3NzEw+\\nT5v6PQrXoz2PwnU+LwMQPgrXoz0pXI8+t7giPgrXoz0K16M+P241PgrXoz3sUbg+xyNIPgrX\\noz3NzMw+T9laPgrXoz2uR+E+145tPgrXoz2PwvU+LyKAPgrXoz24HgU/83yJPgrXoz0pXA8/\\nt9eSPgrXoz2amRk/ezKcPgrXoz0K1yM/P42lPgrXoz17FC4/A+iuPgrXoz3sUTg/x0K4PgrX\\noz1cj0I/i53BPgrXoz3NzEw/T/jKPgrXoz09Clc/E1PUPgrXoz2uR2E/163dPgrXoz0fhWs/\\nmwjnPgrXoz2PwnU/XmPwPgrXoz0AAIA/Ir75PgrXoz0AAAAA28VUPY/C9T0K1yM9/c2PPY/C\\n9T0K16M9DTm1PY/C9T2PwvU9HaTaPY/C9T0K1yM+lgcAPo/C9T3NzEw+Hr0SPo/C9T2PwnU+\\npnIlPo/C9T0pXI8+Lig4Po/C9T0K16M+tt1KPo/C9T3sUbg+PpNdPo/C9T3NzMw+xUhwPo/C\\n9T2uR+E+J3+BPo/C9T2PwvU+69mKPo/C9T24HgU/rjSUPo/C9T0pXA8/co+dPo/C9T2amRk/\\nNuqmPo/C9T0K1yM/+kSwPo/C9T17FC4/vp+5Po/C9T3sUTg/gvrCPo/C9T1cj0I/RlXMPo/C\\n9T3NzEw/CrDVPo/C9T09Clc/zgrfPo/C9T2uR2E/kmXoPo/C9T0fhWs/VsDxPo/C9T2PwnU/\\nGhv7Po/C9T0AAIA/7zoCP4/C9T0AAAAA20GVPQrXIz4K1yM96qy6PQrXIz4K16M9+hfgPQrX\\nIz6PwvU9hcECPgrXIz4K1yM+DXcVPgrXIz7NzEw+lSwoPgrXIz6PwnU+HeI6PgrXIz4pXI8+\\npJdNPgrXIz4K16M+LE1gPgrXIz7sUbg+tAJzPgrXIz7NzMw+HtyCPgrXIz6uR+E+4jaMPgrX\\nIz6PwvU+ppGVPgrXIz64HgU/auyePgrXIz4pXA8/LkeoPgrXIz6amRk/8qGxPgrXIz4K1yM/\\ntvy6PgrXIz57FC4/elfEPgrXIz7sUTg/PbLNPgrXIz5cj0I/AQ3XPgrXIz7NzEw/xWfgPgrX\\nIz49Clc/icLpPgrXIz6uR2E/TR3zPgrXIz4fhWs/EXj8PgrXIz6PwnU/a+kCPwrXIz4AAIA/\\nzZYHPwrXIz4AAAAAyCDAPc3MTD4K1yM92IvlPc3MTD4K16M9dHsFPs3MTD6PwvU9/DAYPs3M\\nTD4K1yM+g+YqPs3MTD7NzEw+C5w9Ps3MTD6PwnU+k1FQPs3MTD4pXI8+GwdjPs3MTD4K16M+\\no7x1Ps3MTD7sUbg+FTmEPs3MTD7NzMw+2ZONPs3MTD6uR+E+ne6WPs3MTD6PwvU+YUmgPs3M\\nTD64HgU/JaSpPs3MTD4pXA8/6f6yPs3MTD6amRk/rVm8Ps3MTD4K1yM/cbTFPs3MTD57FC4/\\nNQ/PPs3MTD7sUTg/+WnYPs3MTD5cj0I/vcThPs3MTD7NzEw/gR/rPs3MTD49Clc/RXr0Ps3M\\nTD6uR2E/CdX9Ps3MTD4fhWs/5pcDP83MTD6PwnU/SEUIP83MTD4AAIA/qvIMP83MTD4AAAAA\\ntf/qPY/CdT4K1yM9YjUIPo/CdT4K16M96uoaPo/CdT6PwvU9cqAtPo/CdT4K1yM++lVAPo/C\\ndT7NzEw+ggtTPo/CdT6PwnU+CsFlPo/CdT4pXI8+knZ4Po/CdT4K16M+DZaFPo/CdT7sUbg+\\n0fCOPo/CdT7NzMw+lUuYPo/CdT6uR+E+WaahPo/CdT6PwvU+HQGrPo/CdT64HgU/4Fu0Po/C\\ndT4pXA8/pLa9Po/CdT6amRk/aBHHPo/CdT4K1yM/LGzQPo/CdT57FC4/8MbZPo/CdT7sUTg/\\ntCHjPo/CdT5cj0I/eHzsPo/CdT7NzEw/PNf1Po/CdT49Clc/ADL/Po/CdT6uR2E/YkYEP4/C\\ndT4fhWs/xPMIP4/CdT6PwnU/JqENP4/CdT4AAIA/iE4SP4/CdT4AAAAAUe8KPilcjz4K1yM9\\n2aQdPilcjz4K16M9YVowPilcjz6PwvU96Q9DPilcjz4K1yM+ccVVPilcjz7NzEw++XpoPilc\\njz6PwnU+gDB7Pilcjz4pXI8+BPOGPilcjz4K16M+yE2QPilcjz7sUbg+jKiZPilcjz7NzMw+\\nUAOjPilcjz6uR+E+FF6sPilcjz6PwvU+2Li1Pilcjz64HgU/nBO/Pilcjz4pXA8/YG7IPilc\\njz6amRk/JMnRPilcjz4K1yM/6CPbPilcjz57FC4/rH7kPilcjz7sUTg/b9ntPilcjz5cj0I/\\nMzT3Pilcjz7NzEw/fEcAPylcjz49Clc/3vQEPylcjz6uR2E/QKIJPylcjz4fhWs/ok8OPylc\\njz6PwnU/BP0SPylcjz4AAIA/ZaoXPylcjz4AAAAAyF4gPgrXoz4K1yM9UBQzPgrXoz4K16M9\\n2MlFPgrXoz6PwvU9YH9YPgrXoz4K1yM+5zRrPgrXoz7NzEw+b+p9PgrXoz6PwnU+/E+IPgrX\\noz4pXI8+v6qRPgrXoz4K16M+gwWbPgrXoz7sUbg+R2CkPgrXoz7NzMw+C7utPgrXoz6uR+E+\\nzxW3PgrXoz6PwvU+k3DAPgrXoz64HgU/V8vJPgrXoz4pXA8/GybTPgrXoz6amRk/34DcPgrX\\noz4K1yM/o9vlPgrXoz57FC4/ZzbvPgrXoz7sUTg/K5H4PgrXoz5cj0I/9/UAPwrXoz7NzEw/\\nWaMFPwrXoz49Clc/u1AKPwrXoz6uR2E/Hf4OPwrXoz4fhWs/f6sTPwrXoz6PwnU/4VgYPwrX\\noz4AAIA/QwYdPwrXoz4AAAAAP841PuxRuD4K1yM9xoNIPuxRuD4K16M9TjlbPuxRuD6PwvU9\\n1u5tPuxRuD4K1yM+L1KAPuxRuD7NzEw+86yJPuxRuD6PwnU+tweTPuxRuD4pXI8+e2KcPuxR\\nuD4K16M+P72lPuxRuD7sUbg+AxivPuxRuD7NzMw+x3K4PuxRuD6uR+E+i83BPuxRuD6PwvU+\\nTijLPuxRuD64HgU/EoPUPuxRuD4pXA8/1t3dPuxRuD6amRk/mjjnPuxRuD4K1yM/XpPwPuxR\\nuD57FC4/Iu75PuxRuD7sUTg/c6QBP+xRuD5cj0I/1VEGP+xRuD7NzEw/N/8KP+xRuD49Clc/\\nmawPP+xRuD6uR2E/+1kUP+xRuD4fhWs/XQcZP+xRuD6PwnU/v7QdP+xRuD4AAIA/IWIiP+xR\\nuD4AAAAAtT1LPs3MzD4K1yM9PfNdPs3MzD4K16M9xahwPs3MzD6PwvU9Jq+BPs3MzD4K1yM+\\n6gmLPs3MzD7NzEw+rmSUPs3MzD6PwnU+cr+dPs3MzD4pXI8+NhqnPs3MzD4K16M++nSwPs3M\\nzD7sUbg+vs+5Ps3MzD7NzMw+girDPs3MzD6uR+E+RoXMPs3MzD6PwvU+CuDVPs3MzD64HgU/\\nzjrfPs3MzD4pXA8/kpXoPs3MzD6amRk/VvDxPs3MzD4K1yM/Gkv7Ps3MzD57FC4/71ICP83M\\nzD7sUTg/UQAHP83MzD5cj0I/s60LP83MzD7NzEw/FVsQP83MzD49Clc/dwgVP83MzD6uR2E/\\n2bUZP83MzD4fhWs/O2MeP83MzD6PwnU/nRAjP83MzD4AAIA//r0nP83MzD4AAAAALK1gPq5H\\n4T4K1yM9tGJzPq5H4T4K16M9HgyDPq5H4T6PwvU94maMPq5H4T4K1yM+psGVPq5H4T7NzEw+\\nahyfPq5H4T6PwnU+LneoPq5H4T4pXI8+8dGxPq5H4T4K16M+tSy7Pq5H4T7sUbg+eYfEPq5H\\n4T7NzMw+PeLNPq5H4T6uR+E+AT3XPq5H4T6PwvU+xZfgPq5H4T64HgU/ifLpPq5H4T4pXA8/\\nTU3zPq5H4T6amRk/Eaj8Pq5H4T4K1yM/agEDP65H4T57FC4/zK4HP65H4T7sUTg/LlwMP65H\\n4T5cj0I/kAkRP65H4T7NzEw/8rYVP65H4T49Clc/VGQaP65H4T6uR2E/thEfP65H4T4fhWs/\\nGL8jP65H4T6PwnU/emwoP65H4T4AAIA/3BktP65H4T4AAAAAohx2Po/C9T4K1yM9FWmEPo/C\\n9T4K16M92cONPo/C9T6PwvU9nR6XPo/C9T4K1yM+YXmgPo/C9T7NzEw+JdSpPo/C9T6PwnU+\\n6S6zPo/C9T4pXI8+rYm8Po/C9T4K16M+ceTFPo/C9T7sUbg+NT/PPo/C9T7NzMw++ZnYPo/C\\n9T6uR+E+vfThPo/C9T6PwvU+gE/rPo/C9T64HgU/RKr0Po/C9T4pXA8/CAX+Po/C9T6amRk/\\n5q8DP4/C9T4K1yM/SF0IP4/C9T57FC4/qgoNP4/C9T7sUTg/DLgRP4/C9T5cj0I/bmUWP4/C\\n9T7NzEw/0BIbP4/C9T49Clc/MsAfP4/C9T6uR2E/lG0kP4/C9T4fhWs/9hopP4/C9T6PwnU/\\n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\\nZOc/P+xROD+uR2E/xpREP+xROD8fhWs/KEJJP+xROD+PwnU/iu9NP+xROD8AAIA/7JxSP+xR\\nOD8AAAAAcBTGPlyPQj8K1yM9NG/PPlyPQj8K16M9+MnYPlyPQj+PwvU9vCTiPlyPQj8K1yM+\\ngH/rPlyPQj/NzEw+RNr0PlyPQj+PwnU+CDX+PlyPQj8pXI8+5scDP1yPQj8K16M+SHUIP1yP\\nQj/sUbg+qiINP1yPQj/NzMw+DNARP1yPQj+uR+E+bn0WP1yPQj+PwvU+0CobP1yPQj+4HgU/\\nMtgfP1yPQj8pXA8/lIUkP1yPQj+amRk/9jIpP1yPQj8K1yM/WOAtP1yPQj97FC4/uo0yP1yP\\nQj/sUTg/HDs3P1yPQj9cj0I/fug7P1yPQj/NzEw/4JVAP1yPQj89Clc/QkNFP1yPQj+uR2E/\\npPBJP1yPQj8fhWs/BZ5OP1yPQj+PwnU/Z0tTP1yPQj8AAIA/yfhXP1yPQj8AAAAALMzQPs3M\\nTD8K1yM98CbaPs3MTD8K16M9tIHjPs3MTD+PwvU9eNzsPs3MTD8K1yM+PDf2Ps3MTD/NzEw+\\n/5H/Ps3MTD+PwnU+YnYEP83MTD8pXI8+xCMJP83MTD8K16M+JtENP83MTD/sUbg+iH4SP83M\\nTD/NzMw+6isXP83MTD+uR+E+TNkbP83MTD+PwvU+roYgP83MTD+4HgU/DzQlP83MTD8pXA8/\\nceEpP83MTD+amRk/044uP83MTD8K1yM/NTwzP83MTD97FC4/l+k3P83MTD/sUTg/+ZY8P83M\\nTD9cj0I/W0RBP83MTD/NzEw/vfFFP83MTD89Clc/H59KP83MTD+uR2E/gUxPP83MTD8fhWs/\\n4/lTP83MTD+PwnU/RadYP83MTD8AAIA/p1RdP83MTD8AAAAA54PbPj0KVz8K1yM9q97kPj0K\\nVz8K16M9bznuPj0KVz+PwvU9M5T3Pj0KVz8K1yM+e3cAPz0KVz/NzEw+3SQFPz0KVz+PwnU+\\nP9IJPz0KVz8pXI8+oX8OPz0KVz8K16M+Ay0TPz0KVz/sUbg+ZdoXPz0KVz/NzMw+x4ccPz0K\\nVz+uR+E+KTUhPz0KVz+PwvU+i+IlPz0KVz+4HgU/7Y8qPz0KVz8pXA8/Tz0vPz0KVz+amRk/\\nseozPz0KVz8K1yM/E5g4Pz0KVz97FC4/dUU9Pz0KVz/sUTg/1/JBPz0KVz9cj0I/OaBGPz0K\\n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\\npD6PwnU9NDMzP4g5rj6PwnU9pHA9P0yUtz6PwnU9FK5HPw/vwD6PwnU9hetRP9NJyj6PwnU9\\n9ihcP5ek0z6PwnU9ZmZmP1v/3D6PwnU916NwPx5a5j6PwnU9SOF6P+K07z6PwnU9CtejPP5R\\nTz3NzMw9j8J1PQ4UjT3NzMw9zMzMPR5/sj3NzMw9KVwPPi7q1z3NzMw961E4Pj1V/T3NzMw9\\nrkdhPiZgET7NzMw9uB6FPq4VJD7NzMw9mpmZPjbLNj7NzMw9exSuPr6AST7NzMw9XI/CPkY2\\nXD7NzMw9PgrXPs7rbj7NzMw9HoXrPqvQgD7NzMw9AAAAP24rij7NzMw9cD0KPzKGkz7NzMw9\\n4noUP/bgnD7NzMw9UrgeP7o7pj7NzMw9wvUoP36Wrz7NzMw9NDMzP0LxuD7NzMw9pHA9PwZM\\nwj7NzMw9FK5HP8qmyz7NzMw9hetRP44B1T7NzMw99ihcP1Jc3j7NzMw9ZmZmPxa35z7NzMw9\\n16NwP9oR8T7NzMw9SOF6P55s+j7NzMw9CtejPOyHkj0oXA8+j8J1Pfzytz0oXA8+zMzMPQxe\\n3T0oXA8+KVwPPo1kAT4oXA8+61E4PhUaFD4oXA8+rkdhPp3PJj4oXA8+uB6FPiWFOT4oXA8+\\nmpmZPq06TD4oXA8+exSuPjXwXj4oXA8+XI/CPr2lcT4oXA8+PgrXPqItgj4oXA8+HoXrPmaI\\niz4oXA8+AAAAPyrjlD4oXA8+cD0KP+49nj4oXA8+4noUP7KYpz4oXA8+UrgeP3bzsD4oXA8+\\nwvUoPzpOuj4oXA8+NDMzP/2owz4oXA8+pHA9P8EDzT4oXA8+FK5HP4Ve1j4oXA8+hetRP0m5\\n3z4oXA8+9ihcPw0U6T4oXA8+ZmZmP9Fu8j4oXA8+16NwP5bJ+z4oXA8+SOF6Py2SAj8oXA8+\\nCtejPNlmvT3rUTg+j8J1PenR4j3rUTg+zMzMPXweBD7rUTg+KVwPPgTUFj7rUTg+61E4PoyJ\\nKT7rUTg+rkdhPhQ/PD7rUTg+uB6FPpz0Tj7rUTg+mpmZPiSqYT7rUTg+exSuPqxfdD7rUTg+\\nXI/CPpmKgz7rUTg+PgrXPl3ljD7rUTg+HoXrPiFAlj7rUTg+AAAAP+Wanz7rUTg+cD0KP6n1\\nqD7rUTg+4noUP21Qsj7rUTg+UrgePzGruz7rUTg+wvUoP/UFxT7rUTg+NDMzP7lgzj7rUTg+\\npHA9P3271z7rUTg+FK5HP0EW4T7rUTg+hetRPwVx6j7rUTg+9ihcP8nL8z7rUTg+ZmZmP40m\\n/T7rUTg+16NwP6hAAz/rUTg+SOF6PwruBz/rUTg+CtejPMZF6D2uR2E+j8J1PWvYBj6uR2E+\\nzMzMPfONGT6uR2E+KVwPPntDLD6uR2E+61E4PgL5Pj6uR2E+rkdhPoquUT6uR2E+uB6FPhJk\\nZD6uR2E+mpmZPpoZdz6uR2E+exSuPpHnhD6uR2E+XI/CPlVCjj6uR2E+PgrXPhmdlz6uR2E+\\nHoXrPt33oD6uR2E+AAAAP6FSqj6uR2E+cD0KP2Wtsz6uR2E+4noUPygIvT6uR2E+UrgeP+1i\\nxj6uR2E+wvUoP7C9zz6uR2E+NDMzP3UY2T6uR2E+pHA9Pzhz4j6uR2E+FK5HP/3N6z6uR2E+\\nhetRP8Ao9T6uR2E+9ihcP4WD/j6uR2E+ZmZmPyTvAz+uR2E+16NwP4acCD+uR2E+SOF6P+hJ\\nDT+uR2E+CtejPFmSCT64HoU+j8J1PeFHHD64HoU+zMzMPWn9Lj64HoU+KVwPPvGyQT64HoU+\\n61E4PnloVD64HoU+rkdhPgEeZz64HoU+uB6FPonTeT64HoU+mpmZPohEhj64HoU+exSuPkyf\\njz64HoU+XI/CPhD6mD64HoU+PgrXPtRUoj64HoU+HoXrPpivqz64HoU+AAAAP1wKtT64HoU+\\ncD0KPyBlvj64HoU+4noUP+S/xz64HoU+UrgeP6ga0T64HoU+wvUoP2x12j64HoU+NDMzPzDQ\\n4z64HoU+pHA9P/Qq7T64HoU+FK5HP7iF9j64HoU+hetRP3zg/z64HoU+9ihcP6CdBD+4HoU+\\nZmZmPwJLCT+4HoU+16NwP2T4DT+4HoU+SOF6P8alEj+4HoU+CtejPNABHz6amZk+j8J1PVi3\\nMT6amZk+zMzMPeBsRD6amZk+KVwPPmgiVz6amZk+61E4PvDXaT6amZk+rkdhPniNfD6amZk+\\nuB6FPoChhz6amZk+mpmZPkT8kD6amZk+exSuPghXmj6amZk+XI/CPsyxoz6amZk+PgrXPpAM\\nrT6amZk+HoXrPlRntj6amZk+AAAAPxjCvz6amZk+cD0KP9wcyT6amZk+4noUP6B30j6amZk+\\nUrgeP2TS2z6amZk+wvUoPygt5T6amZk+NDMzP+yH7j6amZk+pHA9P67i9z6amZk+FK5HP7me\\nAD+amZk+hetRPxxMBT+amZk+9ihcP335CT+amZk+ZmZmP+CmDj+amZk+16NwP0FUEz+amZk+\\nSOF6P6MBGD+amZk+CtejPEhxND57FK4+j8J1PdAmRz57FK4+zMzMPVjcWT57FK4+KVwPPuCR\\nbD57FK4+61E4PmZHfz57FK4+rkdhPnj+iD57FK4+uB6FPjxZkj57FK4+mpmZPv+zmz57FK4+\\nexSuPsMOpT57FK4+XI/CPodprj57FK4+PgrXPkvEtz57FK4+HoXrPg4fwT57FK4+AAAAP9J5\\nyj57FK4+cD0KP5bU0z57FK4+4noUP1ov3T57FK4+UrgePx6K5j57FK4+wvUoP+Lk7z57FK4+\\nNDMzP6Y/+T57FK4+pHA9PzVNAT97FK4+FK5HP5f6BT97FK4+hetRP/mnCj97FK4+9ihcP1tV\\nDz97FK4+ZmZmP70CFD97FK4+16NwPx+wGD97FK4+SOF6P4FdHT97FK4+CtejPL3gST5cj8I+\\nj8J1PUWWXD5cj8I+zMzMPc1Lbz5cj8I+KVwPPqoAgT5cj8I+61E4Pm5bij5cj8I+rkdhPjK2\\nkz5cj8I+uB6FPvYQnT5cj8I+mpmZPrprpj5cj8I+exSuPn7Grz5cj8I+XI/CPkIhuT5cj8I+\\nPgrXPgZ8wj5cj8I+HoXrPsrWyz5cj8I+AAAAP44x1T5cj8I+cD0KP1KM3j5cj8I+4noUPxbn\\n5z5cj8I+UrgeP9pB8T5cj8I+wvUoP56c+j5cj8I+NDMzP7H7AT9cj8I+pHA9PxOpBj9cj8I+\\nFK5HP3VWCz9cj8I+hetRP9cDED9cj8I+9ihcPzmxFD9cj8I+ZmZmP5teGT9cj8I+16NwP/0L\\nHj9cj8I+SOF6P165Ij9cj8I+CtejPDVQXz4+Ctc+j8J1Pb0Fcj4+Ctc+zMzMPaJdgj4+Ctc+\\nKVwPPma4iz4+Ctc+61E4PioTlT4+Ctc+rkdhPu5tnj4+Ctc+uB6FPrLIpz4+Ctc+mpmZPnUj\\nsT4+Ctc+exSuPjl+uj4+Ctc+XI/CPv3Ywz4+Ctc+PgrXPsEzzT4+Ctc+HoXrPoWO1j4+Ctc+\\nAAAAP0np3z4+Ctc+cD0KPw1E6T4+Ctc+4noUP9Ge8j4+Ctc+UrgeP5X5+z4+Ctc+wvUoPyyq\\nAj8+Ctc+NDMzP45XBz8+Ctc+pHA9P/AEDD8+Ctc+FK5HP1KyED8+Ctc+hetRP7RfFT8+Ctc+\\n9ihcPxYNGj8+Ctc+ZmZmP3i6Hj8+Ctc+16NwP9pnIz8+Ctc+SOF6PzwVKD8+Ctc+CtejPKq/\\ndD4fhes+j8J1PZm6gz4fhes+zMzMPV0VjT4fhes+KVwPPiFwlj4fhes+61E4PuXKnz4fhes+\\nrkdhPqklqT4fhes+uB6FPm2Asj4fhes+mpmZPjHbuz4fhes+exSuPvU1xT4fhes+XI/CPrmQ\\nzj4fhes+PgrXPn3r1z4fhes+HoXrPkFG4T4fhes+AAAAPwWh6j4fhes+cD0KP8j78z4fhes+\\n4noUP41W/T4fhes+UrgeP6hYAz8fhes+wvUoPwoGCD8fhes+NDMzP2yzDD8fhes+pHA9P85g\\nET8fhes+FK5HPzAOFj8fhes+hetRP5K7Gj8fhes+9ihcP/RoHz8fhes+ZmZmP1YWJD8fhes+\\n16NwP7jDKD8fhes+SOF6PxpxLT8fhes+CtejPJEXhT4AAAA/j8J1PVRyjj4AAAA/zMzMPRjN\\nlz4AAAA/KVwPPtwnoT4AAAA/61E4PqCCqj4AAAA/rkdhPmXdsz4AAAA/uB6FPig4vT4AAAA/\\nmpmZPu2Sxj4AAAA/exSuPrDtzz4AAAA/XI/CPnVI2T4AAAA/PgrXPjij4j4AAAA/HoXrPvz9\\n6z4AAAA/AAAAP8BY9T4AAAA/cD0KP4Sz/j4AAAA/4noUPyQHBD8AAAA/UrgeP4a0CD8AAAA/\\nwvUoP+hhDT8AAAA/NDMzP0oPEj8AAAA/pHA9P6y8Fj8AAAA/FK5HPw5qGz8AAAA/hetRP3AX\\nID8AAAA/9ihcP9LEJD8AAAA/ZmZmPzRyKT8AAAA/16NwP5UfLj8AAAA/SOF6P/jMMj8AAAA/\\nCtejPEzPjz5wPQo/j8J1PRAqmT5wPQo/zMzMPdSEoj5wPQo/KVwPPpjfqz5wPQo/61E4Plw6\\ntT5wPQo/rkdhPiCVvj5wPQo/uB6FPuTvxz5wPQo/mpmZPqhK0T5wPQo/exSuPmyl2j5wPQo/\\nXI/CPjAA5D5wPQo/PgrXPvRa7T5wPQo/HoXrPri19j5wPQo/AAAAPz4IAD9wPQo/cD0KP6C1\\nBD9wPQo/4noUPwFjCT9wPQo/UrgeP2QQDj9wPQo/wvUoP8W9Ej9wPQo/NDMzPyhrFz9wPQo/\\npHA9P4kYHD9wPQo/FK5HP+zFID9wPQo/hetRP01zJT9wPQo/9ihcP7AgKj9wPQo/ZmZmPxHO\\nLj9wPQo/16NwP3N7Mz9wPQo/SOF6P9UoOD9wPQo/CtejPAiHmj7iehQ/j8J1Pczhoz7iehQ/\\nzMzMPZA8rT7iehQ/KVwPPlSXtj7iehQ/61E4Phjyvz7iehQ/rkdhPtxMyT7iehQ/uB6FPp+n\\n0j7iehQ/mpmZPmMC3D7iehQ/exSuPidd5T7iehQ/XI/CPuu37j7iehQ/PgrXPq4S+D7iehQ/\\nHoXrPrm2AD/iehQ/AAAAPxxkBT/iehQ/cD0KP30RCj/iehQ/4noUP9++Dj/iehQ/UrgeP0Fs\\nEz/iehQ/wvUoP6MZGD/iehQ/NDMzPwXHHD/iehQ/pHA9P2d0IT/iehQ/FK5HP8khJj/iehQ/\\nhetRPyvPKj/iehQ/9ihcP418Lz/iehQ/ZmZmP+8pND/iehQ/16NwP1HXOD/iehQ/SOF6P7OE\\nPT/iehQ/CtejPMI+pT5SuB4/j8J1PYaZrj5SuB4/zMzMPUr0tz5SuB4/KVwPPg5PwT5SuB4/\\n61E4PtKpyj5SuB4/rkdhPpYE1D5SuB4/uB6FPlpf3T5SuB4/mpmZPh665j5SuB4/exSuPuIU\\n8D5SuB4/XI/CPqZv+T5SuB4/PgrXPjVlAT9SuB4/HoXrPpcSBj9SuB4/AAAAP/m/Cj9SuB4/\\ncD0KP1ttDz9SuB4/4noUP70aFD9SuB4/UrgePx/IGD9SuB4/wvUoP4F1HT9SuB4/NDMzP+Mi\\nIj9SuB4/pHA9P0XQJj9SuB4/FK5HP6d9Kz9SuB4/hetRPwkrMD9SuB4/9ihcP2vYND9SuB4/\\nZmZmP82FOT9SuB4/16NwPy4zPj9SuB4/SOF6P5DgQj9SuB4/CtejPH72rz7D9Sg/j8J1PUJR\\nuT7D9Sg/zMzMPQaswj7D9Sg/KVwPPsoGzD7D9Sg/61E4Po5h1T7D9Sg/rkdhPlK83j7D9Sg/\\nuB6FPhUX6D7D9Sg/mpmZPtlx8T7D9Sg/exSuPp7M+j7D9Sg/XI/CPrETAj/D9Sg/PgrXPhPB\\nBj/D9Sg/HoXrPnVuCz/D9Sg/AAAAP9YbED/D9Sg/cD0KPzjJFD/D9Sg/4noUP5p2GT/D9Sg/\\nUrgeP/wjHj/D9Sg/wvUoP17RIj/D9Sg/NDMzP8B+Jz/D9Sg/pHA9PyIsLD/D9Sg/FK5HP4XZ\\nMD/D9Sg/hetRP+aGNT/D9Sg/9ihcP0g0Oj/D9Sg/ZmZmP6rhPj/D9Sg/16NwPw2PQz/D9Sg/\\nSOF6P248SD/D9Sg/CtejPDmuuj4zMzM/j8J1Pf0IxD4zMzM/zMzMPcFjzT4zMzM/KVwPPoW+\\n1j4zMzM/61E4PkkZ4D4zMzM/rkdhPg106T4zMzM/uB6FPtHO8j4zMzM/mpmZPpUp/D4zMzM/\\nexSuPizCAj8zMzM/XI/CPo5vBz8zMzM/PgrXPvAcDD8zMzM/HoXrPlLKED8zMzM/AAAAP7R3\\nFT8zMzM/cD0KPxYlGj8zMzM/4noUP3jSHj8zMzM/UrgeP9p/Iz8zMzM/wvUoPzwtKD8zMzM/\\nNDMzP57aLD8zMzM/pHA9PwCIMT8zMzM/FK5HP2I1Nj8zMzM/hetRP8TiOj8zMzM/9ihcPyaQ\\nPz8zMzM/ZmZmP4g9RD8zMzM/16NwP+rqSD8zMzM/SOF6P0yYTT8zMzM/CtejPPVlxT6kcD0/\\nj8J1PbjAzj6kcD0/zMzMPX0b2D6kcD0/KVwPPkB24T6kcD0/61E4PgXR6j6kcD0/rkdhPsgr\\n9D6kcD0/uB6FPo2G/T6kcD0/mpmZPqhwAz+kcD0/exSuPgoeCD+kcD0/XI/CPmzLDD+kcD0/\\nPgrXPs54ET+kcD0/HoXrPjAmFj+kcD0/AAAAP5LTGj+kcD0/cD0KP/SAHz+kcD0/4noUP1Yu\\nJD+kcD0/UrgeP7jbKD+kcD0/wvUoPxqJLT+kcD0/NDMzP3w2Mj+kcD0/pHA9P97jNj+kcD0/\\nFK5HP0CROz+kcD0/hetRP6I+QD+kcD0/9ihcPwTsRD+kcD0/ZmZmP2WZST+kcD0/16NwP8hG\\nTj+kcD0/SOF6Pyn0Uj+kcD0/CtejPLAd0D4Urkc/j8J1PXR42T4Urkc/zMzMPTjT4j4Urkc/\\nKVwPPvwt7D4Urkc/61E4PsCI9T4Urkc/rkdhPoTj/j4Urkc/uB6FPiQfBD8Urkc/mpmZPobM\\nCD8Urkc/exSuPuh5DT8Urkc/XI/CPkonEj8Urkc/PgrXPqzUFj8Urkc/HoXrPg6CGz8Urkc/\\nAAAAP3AvID8Urkc/cD0KP9HcJD8Urkc/4noUPzSKKT8Urkc/UrgeP5U3Lj8Urkc/wvUoP/jk\\nMj8Urkc/NDMzP1mSNz8Urkc/pHA9P7w/PD8Urkc/FK5HPx3tQD8Urkc/hetRP4CaRT8Urkc/\\n9ihcP+FHSj8Urkc/ZmZmP0P1Tj8Urkc/16NwP6WiUz8Urkc/SOF6PwdQWD8Urkc/CtejPGzV\\n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\\nPj0K1yM9j8L1PULmhD0K1yM9CtcjPlJRqj0K1yM9zcxMPmK8zz0K1yM9j8J1PnEn9T0K1yM9\\nKVyPPkBJDT4K1yM9CtejPsj+Hz4K1yM97FG4PlC0Mj4K1yM9zczMPthpRT4K1yM9rkfhPmAf\\nWD4K1yM9j8L1PujUaj4K1yM9uB4FP3CKfT4K1yM9KVwPP/wfiD4K1yM9mpkZP8B6kT4K1yM9\\nCtcjP4TVmj4K1yM9exQuP0gwpD4K1yM97FE4PwyLrT4K1yM9XI9CP8/ltj4K1yM9zcxMP5NA\\nwD4K1yM9PQpXP1ebyT4K1yM9rkdhPxv20j4K1yM9H4VrP99Q3D4K1yM9j8J1P6Or5T4K1yM9\\nAACAP2cG7z4K1yM9AAAAAAAQ/jwK16M9CtcjPSDeST0K16M9CtejPSBaij0K16M9j8L1PS/F\\nrz0K16M9CtcjPj8w1T0K16M9zcxMPk+b+j0K16M9j8J1Pi8DED4K16M9KVyPPre4Ij4K16M9\\nCtejPj9uNT4K16M97FG4PscjSD4K16M9zczMPk/ZWj4K16M9rkfhPteObT4K16M9j8L1Pi8i\\ngD4K16M9uB4FP/N8iT4K16M9KVwPP7fXkj4K16M9mpkZP3synD4K16M9CtcjPz+NpT4K16M9\\nexQuPwPorj4K16M97FE4P8dCuD4K16M9XI9CP4udwT4K16M9zcxMP0/4yj4K16M9PQpXPxNT\\n1D4K16M9rkdhP9et3T4K16M9H4VrP5sI5z4K16M9j8J1P15j8D4K16M9AACAPyK++T4K16M9\\nAAAAANvFVD2PwvU9CtcjPf3Njz2PwvU9CtejPQ05tT2PwvU9j8L1PR2k2j2PwvU9CtcjPpYH\\nAD6PwvU9zcxMPh69Ej6PwvU9j8J1PqZyJT6PwvU9KVyPPi4oOD6PwvU9CtejPrbdSj6PwvU9\\n7FG4Pj6TXT6PwvU9zczMPsVIcD6PwvU9rkfhPid/gT6PwvU9j8L1PuvZij6PwvU9uB4FP640\\nlD6PwvU9KVwPP3KPnT6PwvU9mpkZPzbqpj6PwvU9CtcjP/pEsD6PwvU9exQuP76fuT6PwvU9\\n7FE4P4L6wj6PwvU9XI9CP0ZVzD6PwvU9zcxMPwqw1T6PwvU9PQpXP84K3z6PwvU9rkdhP5Jl\\n6D6PwvU9H4VrP1bA8T6PwvU9j8J1Pxob+z6PwvU9AACAP+86Aj+PwvU9AAAAANtBlT0K1yM+\\n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\\nj8J1P7+0HT/sUbg+AACAPyFiIj/sUbg+AAAAALU9Sz7NzMw+CtcjPT3zXT7NzMw+CtejPcWo\\ncD7NzMw+j8L1PSavgT7NzMw+CtcjPuoJiz7NzMw+zcxMPq5klD7NzMw+j8J1PnK/nT7NzMw+\\nKVyPPjYapz7NzMw+CtejPvp0sD7NzMw+7FG4Pr7PuT7NzMw+zczMPoIqwz7NzMw+rkfhPkaF\\nzD7NzMw+j8L1Pgrg1T7NzMw+uB4FP8463z7NzMw+KVwPP5KV6D7NzMw+mpkZP1bw8T7NzMw+\\nCtcjPxpL+z7NzMw+exQuP+9SAj/NzMw+7FE4P1EABz/NzMw+XI9CP7OtCz/NzMw+zcxMPxVb\\nED/NzMw+PQpXP3cIFT/NzMw+rkdhP9m1GT/NzMw+H4VrPztjHj/NzMw+j8J1P50QIz/NzMw+\\nAACAP/69Jz/NzMw+AAAAACytYD6uR+E+CtcjPbRicz6uR+E+CtejPR4Mgz6uR+E+j8L1PeJm\\njD6uR+E+CtcjPqbBlT6uR+E+zcxMPmocnz6uR+E+j8J1Pi53qD6uR+E+KVyPPvHRsT6uR+E+\\nCtejPrUsuz6uR+E+7FG4PnmHxD6uR+E+zczMPj3izT6uR+E+rkfhPgE91z6uR+E+j8L1PsWX\\n4D6uR+E+uB4FP4ny6T6uR+E+KVwPP01N8z6uR+E+mpkZPxGo/D6uR+E+CtcjP2oBAz+uR+E+\\nexQuP8yuBz+uR+E+7FE4Py5cDD+uR+E+XI9CP5AJET+uR+E+zcxMP/K2FT+uR+E+PQpXP1Rk\\nGj+uR+E+rkdhP7YRHz+uR+E+H4VrPxi/Iz+uR+E+j8J1P3psKD+uR+E+AACAP9wZLT+uR+E+\\nAAAAAKIcdj6PwvU+CtcjPRVphD6PwvU+CtejPdnDjT6PwvU+j8L1PZ0elz6PwvU+CtcjPmF5\\noD6PwvU+zcxMPiXUqT6PwvU+j8J1Pukusz6PwvU+KVyPPq2JvD6PwvU+CtejPnHkxT6PwvU+\\n7FG4PjU/zz6PwvU+zczMPvmZ2D6PwvU+rkfhPr304T6PwvU+j8L1PoBP6z6PwvU+uB4FP0Sq\\n9D6PwvU+KVwPPwgF/j6PwvU+mpkZP+avAz+PwvU+CtcjP0hdCD+PwvU+exQuP6oKDT+PwvU+\\n7FE4Pwy4ET+PwvU+XI9CP25lFj+PwvU+zcxMP9ASGz+PwvU+PQpXPzLAHz+PwvU+rkdhP5Rt\\nJD+PwvU+H4VrP/YaKT+PwvU+j8J1P1jILT+PwvU+AACAP7p1Mj+PwvU+AAAAAA3GhT64HgU/\\nCtcjPdAgjz64HgU/CtejPZR7mD64HgU/j8L1PVjWoT64HgU/CtcjPhwxqz64HgU/zcxMPuCL\\ntD64HgU/j8J1PqTmvT64HgU/KVyPPmhBxz64HgU/CtejPiyc0D64HgU/7FG4PvD22T64HgU/\\nzczMPrRR4z64HgU/rkfhPnis7D64HgU/j8L1PjwH9j64HgU/uB4FPwBi/z64HgU/KVwPP2Je\\nBD+4HgU/mpkZP8QLCT+4HgU/CtcjPya5DT+4HgU/exQuP4hmEj+4HgU/7FE4P+oTFz+4HgU/\\nXI9CP0zBGz+4HgU/zcxMP65uID+4HgU/PQpXPxAcJT+4HgU/rkdhP3LJKT+4HgU/H4VrP9R2\\nLj+4HgU/j8J1PzUkMz+4HgU/AACAP5fRNz+4HgU/AAAAAMh9kD4pXA8/CtcjPYzYmT4pXA8/\\nCtejPVAzoz4pXA8/j8L1PRSOrD4pXA8/CtcjPtjotT4pXA8/zcxMPpxDvz4pXA8/j8J1Pl+e\\nyD4pXA8/KVyPPiP50T4pXA8/CtejPudT2z4pXA8/7FG4Pquu5D4pXA8/zczMPm8J7j4pXA8/\\nrkfhPjNk9z4pXA8/j8L1PnxfAD8pXA8/uB4FP94MBT8pXA8/KVwPPz+6CT8pXA8/mpkZP6Fn\\nDj8pXA8/CtcjPwMVEz8pXA8/exQuP2XCFz8pXA8/7FE4P8dvHD8pXA8/XI9CPykdIT8pXA8/\\nzcxMP4vKJT8pXA8/PQpXP+13Kj8pXA8/rkdhP08lLz8pXA8/H4VrP7HSMz8pXA8/j8J1PxOA\\nOD8pXA8/AACAP3UtPT8pXA8/AAAAAIM1mz6amRk/CtcjPUeQpD6amRk/CtejPQvrrT6amRk/\\nj8L1Pc9Ftz6amRk/CtcjPpOgwD6amRk/zcxMPlf7yT6amRk/j8J1PhtW0z6amRk/KVyPPt+w\\n3D6amRk/CtejPqML5j6amRk/7FG4Pmdm7z6amRk/zczMPivB+D6amRk/rkfhPvcNAT+amRk/\\nj8L1Plm7BT+amRk/uB4FP7toCj+amRk/KVwPPx0WDz+amRk/mpkZP3/DEz+amRk/CtcjP+Fw\\nGD+amRk/exQuP0MeHT+amRk/7FE4P6XLIT+amRk/XI9CPwd5Jj+amRk/zcxMP2kmKz+amRk/\\nPQpXP8vTLz+amRk/rkdhPy2BND+amRk/H4VrP48uOT+amRk/j8J1P/HbPT+amRk/AACAP1OJ\\nQj+amRk/AAAAAD/tpT4K1yM/CtcjPQJIrz4K1yM/CtejPcaiuD4K1yM/j8L1PYr9wT4K1yM/\\nCtcjPk5Yyz4K1yM/zcxMPhKz1D4K1yM/j8J1PtYN3j4K1yM/KVyPPppo5z4K1yM/CtejPl7D\\n8D4K1yM/7FG4PiIe+j4K1yM/zczMPnO8AT8K1yM/rkfhPtVpBj8K1yM/j8L1PjcXCz8K1yM/\\nuB4FP5nEDz8K1yM/KVwPP/txFD8K1yM/mpkZP10fGT8K1yM/CtcjP7/MHT8K1yM/exQuPyF6\\nIj8K1yM/7FE4P4MnJz8K1yM/XI9CP+XUKz8K1yM/zcxMP0eCMD8K1yM/PQpXP6kvNT8K1yM/\\nrkdhPwvdOT8K1yM/H4VrP22KPj8K1yM/j8J1P843Qz8K1yM/AACAPzDlRz8K1yM/AAAAAPqk\\nsD57FC4/CtcjPb7/uT57FC4/CtejPYJawz57FC4/j8L1PUa1zD57FC4/CtcjPgoQ1j57FC4/\\nzcxMPs5q3z57FC4/j8J1PpHF6D57FC4/KVyPPlUg8j57FC4/CtejPhl7+z57FC4/7FG4Pu9q\\nAj97FC4/zczMPlEYBz97FC4/rkfhPrPFCz97FC4/j8L1PhVzED97FC4/uB4FP3YgFT97FC4/\\nKVwPP9jNGT97FC4/mpkZPzp7Hj97FC4/CtcjP5woIz97FC4/exQuP/7VJz97FC4/7FE4P2CD\\nLD97FC4/XI9CP8IwMT97FC4/zcxMPyTeNT97FC4/PQpXP4aLOj97FC4/rkdhP+g4Pz97FC4/\\nH4VrP0rmQz97FC4/j8J1P6yTSD97FC4/AACAPw5BTT97FC4/AAAAALVcuz7sUTg/CtcjPXm3\\nxD7sUTg/CtejPT0Szj7sUTg/j8L1PQFt1z7sUTg/CtcjPsXH4D7sUTg/zcxMPoki6j7sUTg/\\nj8J1Pk198z7sUTg/KVyPPhHY/D7sUTg/CtejPmoZAz/sUTg/7FG4PszGBz/sUTg/zczMPi50\\nDD/sUTg/rkfhPpAhET/sUTg/j8L1PvLOFT/sUTg/uB4FP1R8Gj/sUTg/KVwPP7YpHz/sUTg/\\nmpkZPxjXIz/sUTg/CtcjP3qEKD/sUTg/exQuP9wxLT/sUTg/7FE4Pz7fMT/sUTg/XI9CP6CM\\n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\\nj8J1PVK4Hj8AhJs+j8J1PcL1KD/E3qQ+j8J1PTQzMz+IOa4+j8J1PaRwPT9MlLc+j8J1PRSu\\nRz8P78A+j8J1PYXrUT/TSco+j8J1PfYoXD+XpNM+j8J1PWZmZj9b/9w+j8J1PdejcD8eWuY+\\nj8J1PUjhej/itO8+j8J1PQrXozz+UU89zczMPY/CdT0OFI09zczMPczMzD0ef7I9zczMPSlc\\nDz4u6tc9zczMPetROD49Vf09zczMPa5HYT4mYBE+zczMPbgehT6uFSQ+zczMPZqZmT42yzY+\\nzczMPXsUrj6+gEk+zczMPVyPwj5GNlw+zczMPT4K1z7O624+zczMPR6F6z6r0IA+zczMPQAA\\nAD9uK4o+zczMPXA9Cj8yhpM+zczMPeJ6FD/24Jw+zczMPVK4Hj+6O6Y+zczMPcL1KD9+lq8+\\nzczMPTQzMz9C8bg+zczMPaRwPT8GTMI+zczMPRSuRz/Kpss+zczMPYXrUT+OAdU+zczMPfYo\\nXD9SXN4+zczMPWZmZj8Wt+c+zczMPdejcD/aEfE+zczMPUjhej+ebPo+zczMPQrXozzsh5I9\\nKFwPPo/CdT388rc9KFwPPszMzD0MXt09KFwPPilcDz6NZAE+KFwPPutROD4VGhQ+KFwPPq5H\\nYT6dzyY+KFwPPrgehT4lhTk+KFwPPpqZmT6tOkw+KFwPPnsUrj418F4+KFwPPlyPwj69pXE+\\nKFwPPj4K1z6iLYI+KFwPPh6F6z5miIs+KFwPPgAAAD8q45Q+KFwPPnA9Cj/uPZ4+KFwPPuJ6\\nFD+ymKc+KFwPPlK4Hj9287A+KFwPPsL1KD86Tro+KFwPPjQzMz/9qMM+KFwPPqRwPT/BA80+\\nKFwPPhSuRz+FXtY+KFwPPoXrUT9Jud8+KFwPPvYoXD8NFOk+KFwPPmZmZj/RbvI+KFwPPtej\\ncD+Wyfs+KFwPPkjhej8tkgI/KFwPPgrXozzZZr0961E4Po/CdT3p0eI961E4PszMzD18HgQ+\\n61E4PilcDz4E1BY+61E4PutROD6MiSk+61E4Pq5HYT4UPzw+61E4PrgehT6c9E4+61E4PpqZ\\nmT4kqmE+61E4PnsUrj6sX3Q+61E4PlyPwj6ZioM+61E4Pj4K1z5d5Yw+61E4Ph6F6z4hQJY+\\n61E4PgAAAD/lmp8+61E4PnA9Cj+p9ag+61E4PuJ6FD9tULI+61E4PlK4Hj8xq7s+61E4PsL1\\n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\\ncD0KP/YoXD+wICo/cD0KP2ZmZj8Rzi4/cD0KP9ejcD9zezM/cD0KP0jhej/VKDg/cD0KPwrX\\nozwIh5o+4noUP4/CdT3M4aM+4noUP8zMzD2QPK0+4noUPylcDz5Ul7Y+4noUP+tROD4Y8r8+\\n4noUP65HYT7cTMk+4noUP7gehT6fp9I+4noUP5qZmT5jAtw+4noUP3sUrj4nXeU+4noUP1yP\\nwj7rt+4+4noUPz4K1z6uEvg+4noUPx6F6z65tgA/4noUPwAAAD8cZAU/4noUP3A9Cj99EQo/\\n4noUP+J6FD/fvg4/4noUP1K4Hj9BbBM/4noUP8L1KD+jGRg/4noUPzQzMz8Fxxw/4noUP6Rw\\nPT9ndCE/4noUPxSuRz/JISY/4noUP4XrUT8rzyo/4noUP/YoXD+NfC8/4noUP2ZmZj/vKTQ/\\n4noUP9ejcD9R1zg/4noUP0jhej+zhD0/4noUPwrXozzCPqU+UrgeP4/CdT2Gma4+UrgeP8zM\\nzD1K9Lc+UrgePylcDz4OT8E+UrgeP+tROD7Sqco+UrgeP65HYT6WBNQ+UrgeP7gehT5aX90+\\nUrgeP5qZmT4euuY+UrgeP3sUrj7iFPA+UrgeP1yPwj6mb/k+UrgePz4K1z41ZQE/UrgePx6F\\n6z6XEgY/UrgePwAAAD/5vwo/UrgeP3A9Cj9bbQ8/UrgeP+J6FD+9GhQ/UrgeP1K4Hj8fyBg/\\nUrgeP8L1KD+BdR0/UrgePzQzMz/jIiI/UrgeP6RwPT9F0CY/UrgePxSuRz+nfSs/UrgeP4Xr\\nUT8JKzA/UrgeP/YoXD9r2DQ/UrgeP2ZmZj/NhTk/UrgeP9ejcD8uMz4/UrgeP0jhej+Q4EI/\\nUrgePwrXozx+9q8+w/UoP4/CdT1CUbk+w/UoP8zMzD0GrMI+w/UoPylcDz7KBsw+w/UoP+tR\\nOD6OYdU+w/UoP65HYT5SvN4+w/UoP7gehT4VF+g+w/UoP5qZmT7ZcfE+w/UoP3sUrj6ezPo+\\nw/UoP1yPwj6xEwI/w/UoPz4K1z4TwQY/w/UoPx6F6z51bgs/w/UoPwAAAD/WGxA/w/UoP3A9\\nCj84yRQ/w/UoP+J6FD+adhk/w/UoP1K4Hj/8Ix4/w/UoP8L1KD9e0SI/w/UoPzQzMz/Afic/\\nw/UoP6RwPT8iLCw/w/UoPxSuRz+F2TA/w/UoP4XrUT/mhjU/w/UoP/YoXD9INDo/w/UoP2Zm\\nZj+q4T4/w/UoP9ejcD8Nj0M/w/UoP0jhej9uPEg/w/UoPwrXozw5rro+MzMzP4/CdT39CMQ+\\nMzMzP8zMzD3BY80+MzMzPylcDz6FvtY+MzMzP+tROD5JGeA+MzMzP65HYT4NdOk+MzMzP7ge\\nhT7RzvI+MzMzP5qZmT6VKfw+MzMzP3sUrj4swgI/MzMzP1yPwj6Obwc/MzMzPz4K1z7wHAw/\\nMzMzPx6F6z5SyhA/MzMzPwAAAD+0dxU/MzMzP3A9Cj8WJRo/MzMzP+J6FD940h4/MzMzP1K4\\nHj/afyM/MzMzP8L1KD88LSg/MzMzPzQzMz+e2iw/MzMzP6RwPT8AiDE/MzMzPxSuRz9iNTY/\\nMzMzP4XrUT/E4jo/MzMzP/YoXD8mkD8/MzMzP2ZmZj+IPUQ/MzMzP9ejcD/q6kg/MzMzP0jh\\nej9MmE0/MzMzPwrXozz1ZcU+pHA9P4/CdT24wM4+pHA9P8zMzD19G9g+pHA9PylcDz5AduE+\\npHA9P+tROD4F0eo+pHA9P65HYT7IK/Q+pHA9P7gehT6Nhv0+pHA9P5qZmT6ocAM/pHA9P3sU\\nrj4KHgg/pHA9P1yPwj5syww/pHA9Pz4K1z7OeBE/pHA9Px6F6z4wJhY/pHA9PwAAAD+S0xo/\\npHA9P3A9Cj/0gB8/pHA9P+J6FD9WLiQ/pHA9P1K4Hj+42yg/pHA9P8L1KD8aiS0/pHA9PzQz\\nMz98NjI/pHA9P6RwPT/e4zY/pHA9PxSuRz9AkTs/pHA9P4XrUT+iPkA/pHA9P/YoXD8E7EQ/\\npHA9P2ZmZj9lmUk/pHA9P9ejcD/IRk4/pHA9P0jhej8p9FI/pHA9PwrXozywHdA+FK5HP4/C\\ndT10eNk+FK5HP8zMzD040+I+FK5HPylcDz78Lew+FK5HP+tROD7AiPU+FK5HP65HYT6E4/4+\\nFK5HP7gehT4kHwQ/FK5HP5qZmT6GzAg/FK5HP3sUrj7oeQ0/FK5HP1yPwj5KJxI/FK5HPz4K\\n1z6s1BY/FK5HPx6F6z4Oghs/FK5HPwAAAD9wLyA/FK5HP3A9Cj/R3CQ/FK5HP+J6FD80iik/\\nFK5HP1K4Hj+VNy4/FK5HP8L1KD/45DI/FK5HPzQzMz9Zkjc/FK5HP6RwPT+8Pzw/FK5HPxSu\\nRz8d7UA/FK5HP4XrUT+AmkU/FK5HP/YoXD/hR0o/FK5HP2ZmZj9D9U4/FK5HP9ejcD+lolM/\\nFK5HP0jhej8HUFg/FK5HPwrXozxs1do+hetRP4/CdT0wMOQ+hetRP8zMzD30iu0+hetRPylc\\nDz645fY+hetRP+tROD49IAA/hetRP65HYT6gzQQ/hetRP7gehT4Bewk/hetRP5qZmT5kKA4/\\nhetRP3sUrj7F1RI/hetRP1yPwj4ogxc/hetRPz4K1z6JMBw/hetRPx6F6z7s3SA/hetRPwAA\\nAD9NiyU/hetRP3A9Cj+vOCo/hetRP+J6FD8R5i4/hetRP1K4Hj9zkzM/hetRP8L1KD/VQDg/\\nhetRPzQzMz837jw/hetRP6RwPT+Zm0E/hetRPxSuRz/7SEY/hetRP4XrUT9d9ko/hetRP/Yo\\nXD+/o08/hetRP2ZmZj8hUVQ/hetRP9ejcD+D/lg/hetRP0jhej/lq10/hetRPwrXozwmjeU+\\n9ihcP4/CdT3q5+4+9ihcP8zMzD2uQvg+9ihcPylcDz65zgA/9ihcP+tROD4bfAU/9ihcP65H\\nYT59KQo/9ihcP7gehT7f1g4/9ihcP5qZmT5BhBM/9ihcP3sUrj6jMRg/9ihcP1yPwj4F3xw/\\n9ihcPz4K1z5njCE/9ihcPx6F6z7JOSY/9ihcPwAAAD8r5yo/9ihcP3A9Cj+NlC8/9ihcP+J6\\nFD/vQTQ/9ihcP1K4Hj9R7zg/9ihcP8L1KD+znD0/9ihcPzQzMz8VSkI/9ihcP6RwPT9390Y/\\n9ihcPxSuRz/ZpEs/9ihcP4XrUT87UlA/9ihcP/YoXD+d/1Q/9ihcP2ZmZj/+rFk/9ihcP9ej\\ncD9gWl4/9ihcP0jhej/CB2M/9ihcPwrXozziRPA+Z2ZmP4/CdT2mn/k+Z2ZmP8zMzD01fQE/\\nZ2ZmPylcDz6XKgY/Z2ZmP+tROD751wo/Z2ZmP65HYT5bhQ8/Z2ZmP7gehT69MhQ/Z2ZmP5qZ\\nmT4f4Bg/Z2ZmP3sUrj6BjR0/Z2ZmP1yPwj7jOiI/Z2ZmPz4K1z5F6CY/Z2ZmPx6F6z6mlSs/\\nZ2ZmPwAAAD8IQzA/Z2ZmP3A9Cj9q8DQ/Z2ZmP+J6FD/NnTk/Z2ZmP1K4Hj8uSz4/Z2ZmP8L1\\nKD+Q+EI/Z2ZmPzQzMz/ypUc/Z2ZmP6RwPT9VU0w/Z2ZmPxSuRz+2AFE/Z2ZmP4XrUT8YrlU/\\nZ2ZmP/YoXD96W1o/Z2ZmP2ZmZj/cCF8/Z2ZmP9ejcD8+tmM/Z2ZmP0jhej+gY2g/Z2ZmPwrX\\nozye/Po+16NwP4/CdT2xKwI/16NwP8zMzD0S2QY/16NwPylcDz50hgs/16NwP+tROD7WMxA/\\n16NwP65HYT444RQ/16NwP7gehT6ajhk/16NwP5qZmT78Ox4/16NwP3sUrj5e6SI/16NwP1yP\\nwj7Alic/16NwPz4K1z4iRCw/16NwPx6F6z6F8TA/16NwPwAAAD/mnjU/16NwP3A9Cj9ITDo/\\n16NwP+J6FD+q+T4/16NwP1K4Hj8Mp0M/16NwP8L1KD9uVEg/16NwPzQzMz/QAU0/16NwP6Rw\\nPT8yr1E/16NwPxSuRz+UXFY/16NwP4XrUT/2CVs/16NwP/YoXD9Yt18/16NwP2ZmZj+6ZGQ/\\n16NwP9ejcD8cEmk/16NwP0jhej9+v20/16NwPwrXozws2gI/SOF6P4/CdT2Ohwc/SOF6P8zM\\nzD3wNAw/SOF6PylcDz5S4hA/SOF6P+tROD60jxU/SOF6P65HYT4WPRo/SOF6P7gehT546h4/\\nSOF6P5qZmT7alyM/SOF6P3sUrj48RSg/SOF6P1yPwj6e8iw/SOF6Pz4K1z4AoDE/SOF6Px6F\\n6z5iTTY/SOF6PwAAAD/E+jo/SOF6P3A9Cj8mqD8/SOF6P+J6FD+IVUQ/SOF6P1K4Hj/qAkk/\\nSOF6P8L1KD9MsE0/SOF6PzQzMz+uXVI/SOF6P6RwPT8QC1c/SOF6PxSuRz9yuFs/SOF6P4Xr\\nUT/UZWA/SOF6P/YoXD81E2U/SOF6P2ZmZj+YwGk/SOF6P9ejcD/5bW4/SOF6P0jhej9cG3M/\\nSOF6PzBFPj+uflA/XnZZPzBFPj8l70U/XnZZP2jdYD9PIlM/fO89P2jdYD+LVEc/fO89P0U+\\naz+2m2U/f/ppP0U+az+bHmM/f/ppP9YNJj/oqEA/HnlkP9YNJj+fokA/HnlkP28wRT+2m2U/\\nXnZZP28wRT8wGEk/XnZZP9C6QT7TsF0//fRTP9C6QT43RAI//fRTP28wRT+Zhm0/L7tsP28w\\nRT+nLVM/L7tsP2GKfD+2m2U/AACAP2GKfD92i3Y/AACAP0yRTz/QUQE/DjdcP0yRTz+IRk8/\\nDjdcP2jdYD90VGA/XnZZP2jdYD9bvFU/XnZZP4Mp8j71gw4/HG44P4Mp8j5ZCxU/HG44P+Sz\\nbj8V+GI/oH56P+Szbj/QV20/oH56P+Szbj8dFXg/7713P+Szbj8I52s/7713P0U+6z43yxM/\\n/fRTP0U+6z6j3iE//fRTP33WDT8Fvjg/zjlnP33WDT/BAzc/zjlnP+Szbj8Fvrg+KaWUPuSz\\nbj/SJRE/KaWUPpgiHz/oqEA/TTTRPpgiHz/aTPk+TTTRPvJZNz8N200/uOEGP/JZNz+rjhc/\\nuOEGP4Mp8j7TsN0+7bLLPoMp8j7Tp9M+7bLLPiOfdT/44mo/nXNOPyOfdT9cdFk/nXNOP1o3\\nmD5HBb4+u+wyP1o3mD4EPvs+u+wyP33WDT/9oKM+CCEEP33WDT+iJwM/CCEEP9YNJj/Lk8g+\\nCywwP9YNJj/HQyU/CywwP1o3mD6zPAk+L7vsPlo3mD6m27s+L7vsPtC6QT67WZ4+CywwPtC6\\nQT5Bkik+CywwPt1gCj9x9QM/CyywPt1gCj85DdU+CyywPgAAgD8/6Cg/zjlnPgAAgD+9ZxA/\\nzjlnPg6myD71gw4/aaKJPg6myD7SHp4+aaKJPkyRTz7bzXI+SiklPkyRTz42ISo+SiklPgAA\\nAD+zPIk+jDFGPgAAAD86PKM+jDFGPsln3T03y5M9jzxyPsln3T1+OCY+jzxyPgAAAABfXP09\\nAAAAAAAAAADUzjG8AAAAAIMp8j4/6Cg+TTRRPoMp8j60y58+TTRRPsln3Tw3y5M9CCEEPsln\\n3Tx6WY09CCEEPtC6QT5PItM9CyywPdC6QT6D8vY9CyywPdC6QT7TsF0+ySMPPtC6QT7hSBg+\\nySMPPsIU+T3DdjM+TTRRPsIU+T00QRs+TTRRPsIU+T0/6Cg9zjlnPsIU+T10xyY+zjlnPsln\\n3TwAAAAADjfcPcln3Tz0mWw9DjfcPdC6wT2zPAk+SiklPtC6wT0SIe89SiklPt1gij1fXP08\\nUD99Pt1gij1dBRk+UD99Pt1gCj4/6Kg9jDFGPt1gCj4q0Bs+jDFGPgAAAABPIlM9ySMPPgAA\\nAADFLn89ySMPPpHPuj7Lk8g+DjfcPpHPuj4sBMM+DjfcPslnXTw3y5M9aaKJPslnXTxGQws+\\naaKJPgD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD/\\n//8A/////wD///8A////AP///wD//wD///8A/////wD///8A////AP///wD//wD///8A////\\n/wD///8A//8A////AP////8A////AP//AP///wD///8A////AP///wD///8A////AP///wD/\\n////AP///wD///8A////AP///wD///8A////AP///wD//wD///8A////AP///wD///8A////\\nAP///wD///8A////AP///wD/////AP///wD///8A////AP//AP///wD/////AP///wD//wD/\\n//8A/////wD///8A//8A////AP///wD///8A/////wD///8A////AP///wD//wD///8A////\\n/wD///8A////AP///wD///8A////AP//AP///wD/////AP///wD//zBFPj/qNks/XnZZP2jd\\nYD9tO00/fO89P0U+az8oXWQ/f/ppP9YNJj/EpUA/HnlkP28wRT/zWVc/XnZZP9C6QT6F+i8/\\n/fRTP28wRT8gWmA/L7tsP2GKfD+WE24/AACAP0yRTz8sTCg/DjdcP2jdYD9oCFs/XnZZP4Mp\\n8j6nxxE/HG44P+Szbj/yJ2g/oH56P+Szbj8S/nE/7713P0U+6z7t1Bo//fRTP33WDT/j4Dc/\\nzjlnP+Szbj/UhO0+KaWUPpgiHz+qpx4/TTTRPvJZNz/ctDI/uOEGP4Mp8j5TrNg+7bLLPiOf\\ndT+qK2I/nXNOP1o3mD6modw+u+wyP33WDT8g+NQ+CCEEP9YNJj/WxgQ/CywwP1o3mD4APYA+\\nL7vsPtC6QT7cInM+CywwPt1gCj8OfO4+CyywPgAAgD/+pxw/zjlnPg6myD5ek90+aaKJPkyR\\nTz6Id04+SiklPgAAAD92PJY+jDFGPsln3T0aHvA9jzxyPgAAAACEImc9AAAAAIMp8j7UP3Q+\\nTTRRPsln3TxYkpA9CCEEPtC6QT5pCuU9CyywPdC6QT7a/Do+ySMPPsIU+T38Wyc+TTRRPsIU\\n+T2EAdE9zjlnPsln3Tz0mew8DjfcPdC6wT2eZgA+SiklPt1gij3psLg9UD99Pt1gCj5KRPA9\\njDFGPgAAAACKKGk9ySMPPpHPuj78y8U+DjfcPslnXTziKNU9aaKJPtC6QT5CX2Q//fRTPwAA\\ngD+uli8/zjlnPuSzbj/iGsY+KaWUPgAAAQHQukE+Ql9kP/30Uz8AAIA/rpYvP845Zz7ks24/\\n4hrGPimllD6ZmJg+mZiYPpmYmD4AAIA/AAAAAQEBAQAAAAEBAQEAAAA=\"}]},\"context\":{\"shiny\":false,\"rmarkdown\":null},\"vertexShader\":\"#line 2 1\\n// File 1 is the vertex shader\\n#ifdef GL_ES\\n#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#endif\\n#endif\\n\\nattribute vec3 aPos;\\nattribute vec4 aCol;\\nuniform mat4 mvMatrix;\\nuniform mat4 prMatrix;\\nvarying vec4 vCol;\\nvarying vec4 vPosition;\\n\\n#ifdef NEEDS_VNORMAL\\nattribute vec3 aNorm;\\nuniform mat4 normMatrix;\\nvarying vec4 vNormal;\\n#endif\\n\\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\\nattribute vec2 aTexcoord;\\nvarying vec2 vTexcoord;\\n#endif\\n\\n#ifdef FIXED_SIZE\\nuniform vec3 textScale;\\n#endif\\n\\n#ifdef FIXED_QUADS\\nattribute vec3 aOfs;\\n#endif\\n\\n#ifdef IS_TWOSIDED\\n#ifdef HAS_NORMALS\\nvarying float normz;\\nuniform mat4 invPrMatrix;\\n#else\\nattribute vec3 aPos1;\\nattribute vec3 aPos2;\\nvarying float normz;\\n#endif\\n#endif // IS_TWOSIDED\\n\\n#ifdef FAT_LINES\\nattribute vec3 aNext;\\nattribute vec2 aPoint;\\nvarying vec2 vPoint;\\nvarying float vLength;\\nuniform float uAspect;\\nuniform float uLwd;\\n#endif\\n\\n#ifdef USE_ENVMAP\\nvarying vec3 vReflection;\\n#endif\\n\\nvoid main(void) {\\n  \\n#ifndef IS_BRUSH\\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG) || defined(USE_ENVMAP)\\n  vPosition = mvMatrix * vec4(aPos, 1.);\\n#endif\\n  \\n#ifndef FIXED_QUADS\\n  gl_Position = prMatrix * vPosition;\\n#endif\\n#endif // !IS_BRUSH\\n  \\n#ifdef IS_POINTS\\n  gl_PointSize = POINTSIZE;\\n#endif\\n  \\n  vCol = aCol;\\n  \\n// USE_ENVMAP implies NEEDS_VNORMAL\\n\\n#ifdef NEEDS_VNORMAL\\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\\n#endif\\n\\n#ifdef USE_ENVMAP\\n  vReflection = normalize(reflect(vPosition.xyz/vPosition.w, \\n                        normalize(vNormal.xyz/vNormal.w)));\\n#endif\\n  \\n#ifdef IS_TWOSIDED\\n#ifdef HAS_NORMALS\\n  /* normz should be calculated *after* projection */\\n  normz = (invPrMatrix*vNormal).z;\\n#else\\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\\n#endif\\n#endif // IS_TWOSIDED\\n  \\n#ifdef NEEDS_VNORMAL\\n  vNormal = vec4(normalize(vNormal.xyz), 1);\\n#endif\\n  \\n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\\n  vTexcoord = aTexcoord;\\n#endif\\n  \\n#if defined(FIXED_SIZE) && !defined(ROTATING)\\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\\n  pos = pos/pos.w;\\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\\n#endif\\n  \\n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\\n  pos = pos/pos.w + vec4(aOfs,  0.);\\n  gl_Position = prMatrix*pos;\\n#endif\\n  \\n#ifdef FAT_LINES\\n  /* This code was inspired by Matt Deslauriers' code in \\n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\\n  vec2 aspectVec = vec2(uAspect, 1.0);\\n  mat4 projViewModel = prMatrix * mvMatrix;\\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\\n  currentProjected = currentProjected/currentProjected.w;\\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\\n  vec2 currentScreen = currentProjected.xy * aspectVec;\\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\\n  float len = uLwd;\\n  vec2 dir = vec2(1.0, 0.0);\\n  vPoint = aPoint;\\n  vLength = length(nextScreen - currentScreen)/2.0;\\n  vLength = vLength/(vLength + len);\\n  if (vLength > 0.0) {\\n    dir = normalize(nextScreen - currentScreen);\\n  }\\n  vec2 normal = vec2(-dir.y, dir.x);\\n  dir.x /= uAspect;\\n  normal.x /= uAspect;\\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\\n  gl_Position = currentProjected + offset;\\n#endif\\n  \\n#ifdef IS_BRUSH\\n  gl_Position = vec4(aPos, 1.);\\n#endif\\n}\",\"fragmentShader\":\"#line 2 2\\n// File 2 is the fragment shader\\n#ifdef GL_ES\\n#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#endif\\n#endif\\nvarying vec4 vCol; // carries alpha\\nvarying vec4 vPosition;\\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\\nvarying vec2 vTexcoord;\\nuniform sampler2D uSampler;\\n#endif\\n\\n#ifdef HAS_FOG\\nuniform int uFogMode;\\nuniform vec3 uFogColor;\\nuniform vec4 uFogParms;\\n#endif\\n\\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\\nvarying vec4 vNormal;\\n#endif\\n\\n#if NCLIPPLANES > 0\\nuniform vec4 vClipplane[NCLIPPLANES];\\n#endif\\n\\n#if NLIGHTS > 0\\nuniform mat4 mvMatrix;\\n#endif\\n\\n#ifdef IS_LIT\\nuniform vec3 emission;\\nuniform float shininess;\\n#if NLIGHTS > 0\\nuniform vec3 ambient[NLIGHTS];\\nuniform vec3 specular[NLIGHTS]; // light*material\\nuniform vec3 diffuse[NLIGHTS];\\nuniform vec3 lightDir[NLIGHTS];\\nuniform bool viewpoint[NLIGHTS];\\nuniform bool finite[NLIGHTS];\\n#endif\\n#endif // IS_LIT\\n\\n#ifdef IS_TWOSIDED\\nuniform bool front;\\nvarying float normz;\\n#endif\\n\\n#ifdef FAT_LINES\\nvarying vec2 vPoint;\\nvarying float vLength;\\n#endif\\n\\n#ifdef USE_ENVMAP\\nvarying vec3 vReflection;\\n#endif\\n\\nvoid main(void) {\\n  vec4 fragColor;\\n#ifdef FAT_LINES\\n  vec2 point = vPoint;\\n  bool neg = point.y < 0.0;\\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\\n                 -(point.y - vLength)/(1.0 - vLength);\\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\\n  if (neg && length(point) <= 1.0) discard;\\n#endif\\n  point.y = min(point.y, 0.0);\\n  if (length(point) > 1.0) discard;\\n#endif // FAT_LINES\\n  \\n#ifdef ROUND_POINTS\\n  vec2 coord = gl_PointCoord - vec2(0.5);\\n  if (length(coord) > 0.5) discard;\\n#endif\\n  \\n#if NCLIPPLANES > 0\\n  for (int i = 0; i < NCLIPPLANES; i++)\\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\\n#endif\\n    \\n#ifdef FIXED_QUADS\\n    vec3 n = vec3(0., 0., 1.);\\n#elif defined(IS_LIT)\\n    vec3 n = normalize(vNormal.xyz);\\n#endif\\n    \\n#ifdef IS_TWOSIDED\\n    if ((normz <= 0.) != front) discard;\\n#endif\\n\\n#ifdef IS_LIT\\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\\n    vec3 lightdir;\\n    vec4 colDiff;\\n    vec3 halfVec;\\n    vec4 lighteffect = vec4(emission, 0.);\\n    vec3 col;\\n    float nDotL;\\n#ifdef FIXED_QUADS\\n    n = -faceforward(n, n, eye);\\n#endif\\n    \\n#if NLIGHTS > 0\\n    // Simulate two-sided lighting\\n    if (n.z < 0.0)\\n      n = -n;\\n    for (int i=0;i<NLIGHTS;i++) {\\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\\n      lightdir = lightDir[i];\\n      if (!viewpoint[i]) {\\n        if (finite[i]) {\\n          lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\\n        } else {\\n          lightdir = (mvMatrix * vec4(lightdir, 0.)).xyz;\\n        }\\n      }\\n      if (!finite[i]) {\\n        halfVec = normalize(lightdir + eye);\\n      } else {\\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\\n        halfVec = normalize(lightdir + eye);\\n      }\\n      col = ambient[i];\\n      nDotL = dot(n, lightdir);\\n      col = col + max(nDotL, 0.) * colDiff.rgb;\\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\\n      lighteffect = lighteffect + vec4(col, colDiff.a);\\n    }\\n#endif\\n    \\n#else // not IS_LIT\\n    vec4 colDiff = vCol;\\n    vec4 lighteffect = colDiff;\\n#endif\\n    \\n#ifdef IS_TEXT\\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\\n#endif\\n    \\n#ifdef HAS_TEXTURE\\n\\n// These calculations use the definitions from \\n// https://docs.gl/gl3/glTexEnv\\n\\n#ifdef USE_ENVMAP\\n    float m = 2.0 * sqrt(dot(vReflection, vReflection) + 2.0*vReflection.z + 1.0);\\n    vec4 textureColor = texture2D(uSampler, vReflection.xy / m + vec2(0.5, 0.5));\\n#else\\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\\n#endif\\n\\n#ifdef TEXTURE_rgb\\n\\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\\n    textureColor = vec4(textureColor.rgb, lighteffect.a);\\n#endif \\n\\n#ifdef TEXMODE_modulate\\n    textureColor = lighteffect*vec4(textureColor.rgb, 1.);\\n#endif\\n\\n#ifdef TEXMODE_blend\\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb, lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_add\\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb, lighteffect.a);\\n#endif\\n\\n#endif //TEXTURE_rgb\\n        \\n#ifdef TEXTURE_rgba\\n\\n#ifdef TEXMODE_replace\\n// already done\\n#endif \\n\\n#ifdef TEXMODE_modulate\\n    textureColor = lighteffect*textureColor;\\n#endif\\n\\n#ifdef TEXMODE_decal\\n    textureColor = vec4((1. - textureColor.a)*lighteffect.rgb) +\\n                     textureColor.a*textureColor.rgb, \\n                     lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_blend\\n    textureColor = vec4((1. - textureColor.rgb) * lighteffect.rgb,\\n                    lighteffect.a*textureColor.a);\\n#endif\\n\\n#ifdef TEXMODE_add\\n    textureColor = vec4(lighteffect.rgb + textureColor.rgb,\\n                    lighteffect.a*textureColor.a);\\n#endif\\n    \\n#endif //TEXTURE_rgba\\n    \\n#ifdef TEXTURE_alpha\\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\\n\\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\\n    textureColor = vec4(lighteffect.rgb, luminance);\\n#endif \\n\\n#if defined(TEXMODE_modulate) || defined(TEXMODE_blend) || defined(TEXMODE_add)\\n    textureColor = vec4(lighteffect.rgb, lighteffect.a*luminance);\\n#endif\\n \\n#endif // TEXTURE_alpha\\n    \\n// The TEXTURE_luminance values are not from that reference    \\n#ifdef TEXTURE_luminance\\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\\n\\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\\n    textureColor = vec4(luminance, luminance, luminance, lighteffect.a);\\n#endif \\n\\n#ifdef TEXMODE_modulate\\n    textureColor = vec4(luminance*lighteffect.rgb, lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_blend\\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\\n                        lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_add\\n    textureColor = vec4(luminance + lighteffect.rgb, lighteffect.a);\\n#endif\\n\\n#endif // TEXTURE_luminance\\n \\n    \\n#ifdef TEXTURE_luminance_alpha\\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\\n\\n#if defined(TEXMODE_replace) || defined(TEXMODE_decal)\\n    textureColor = vec4(luminance, luminance, luminance, textureColor.a);\\n#endif \\n\\n#ifdef TEXMODE_modulate\\n    textureColor = vec4(luminance*lighteffect.rgb, \\n                        textureColor.a*lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_blend\\n    textureColor = vec4((1. - luminance)*lighteffect.rgb,\\n                        textureColor.a*lighteffect.a);\\n#endif\\n\\n#ifdef TEXMODE_add\\n    textureColor = vec4(luminance + lighteffect.rgb, \\n                        textureColor.a*lighteffect.a);\\n\\n#endif\\n\\n#endif // TEXTURE_luminance_alpha\\n    \\n    fragColor = textureColor;\\n\\n#elif defined(IS_TEXT)\\n    if (textureColor.a < 0.1)\\n      discard;\\n    else\\n      fragColor = textureColor;\\n#else\\n    fragColor = lighteffect;\\n#endif // HAS_TEXTURE\\n    \\n#ifdef HAS_FOG\\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\\n    // In Exp and Exp2: use density = density/far\\n    // fogF will be the proportion of fog\\n    // Initialize it to the linear value\\n    float fogF;\\n    if (uFogMode > 0) {\\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\\n      if (uFogMode > 1)\\n        fogF = mix(uFogParms.w, 1.0, fogF);\\n      fogF = fogF*uFogParms.z;\\n      if (uFogMode == 2)\\n        fogF = 1.0 - exp(-fogF);\\n      // Docs are wrong: use (density*c)^2, not density*c^2\\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\\n      else if (uFogMode == 3)\\n        fogF = 1.0 - exp(-fogF*fogF);\\n      fogF = clamp(fogF, 0.0, 1.0);\\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\\n    } else gl_FragColor = fragColor;\\n#else\\n    gl_FragColor = fragColor;\\n#endif // HAS_FOG\\n    \\n}\",\"players\":[],\"webGLoptions\":{\"preserveDrawingBuffer\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\nThree-dimensional scatterplot for Duncan’s occupational-prestige data, showing the least-squares regression plane. Three unusual points were labeled automatically.\n:::\n\n::: {.callout-warning #wrn-chap03-3d-xquartz}\nThe graph with the proposed code of the book is in my macOS installation shown with an extra XQuartz window only inside RStudio.\n:::\n\n:::::{.my-solution}\n:::{.my-solution-header}\n:::::: {#sol-chap03-3d-rgl}\n: How to embed 3d graphics into Quarto\n::::::\n:::\n::::{.my-solution-container}\nI found a solution from a [StackOverflow post](https://stackoverflow.com/a/63597059/7322615) to embed the 3D-graph into the Quarto document. The post refers to a R Markdown document. Reading the comments I learned that there may be some glitches with Quarto. But luckily I did not experience these mentioned problems.\n\nMy solution:\n\n- `options(rgl.useNULL = TRUE)` to prevent opening an extra window with Xquartz.\n- using `rgl::rglwidget()` after the code for the 3D-plot.\n\n(I did not try the option with calling `rgl::setupKnitr(autoprint = TRUE)` as the first line.)\n::::\n:::::\n\n\nThe graph shows the least-squares regression plane for the regression of the variable on the vertical or y-axis, `prestige`, on the two variables on the horizontal (or x- and z-) axes, `income` and `education`; three cases (minister, conductor, and railroad engineer) are identified as the most unusual based on their <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distances from the centroid (i.e., the point of means) of the three variables. The three-dimensional scatterplot can be rotated by left-clicking and dragging with the mouse. Color is used by default, with perspective, sophisticated lighting, translucency, and fog-based depth cueing.\n\n::::\n:::::\n\nThe `car::scatter3d()` function \n\n- can also plot other regression surfaces (e.g., nonparametric regressions), \n- can identify points interactively and according to other criteria, \n- can plot concentration ellipsoids, and \n- can rotate the plot automatically. \n\nBecause three-dimensional dynamic graphs depend on color, perspective, motion, and so on for their effectiveness, it is important to read the help file for `car::scatter3d()` and to experiment with the examples therein. \n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-chap03-3d-plots}\n: 3-dimensional graphic packages in R\n::::::\n:::\n::::{.my-resource-container}\nBesides several functions for 3D graphics in {**car**} there are also facilities in R for drawing static three-dimensional graphs:\n\n- `graphics::pers()` draws perspective plots of a surface over the x–y plane.\n- {**lattice**} has generic functions to draw static 3d scatter plot and surfaces `cloud()` and `wireframe()`\n\n{**rggobi**} is also mentionded and should link R to the [GGobi](http://ggobi.org/index.html) system for visualizing data in three and more dimensions. See also the [GGobi book](http://ggobi.org/book.html). But I believe that {**rggobi**} and the GGobi system is outdated, because {**rggobi**} is archived and not at CRAN anymore and links from the [GGobi page](http://ggobi.org/index.html) are rotten. But maybe [GGally](https://ggobi.github.io/ggally/) is the successor, because it is on the same GitHub account and the URL stats with \"ggobi\".\n::::\n:::::\n\n### Scatterplot matrices {#sec-chap03-3-2}\n\n<a class='glossary' title='A scatterplot matrix arranges multiple scatterplots on a grid so that they are easy to compare to one another. The matrix arrangement allows you to look at many different relationships between multiple variables in a dataset all at once, which can be very useful for exploratory data analysis. (&lt;a href=“https://unc-libraries-data.github.io/R-Open-Labs/Extras/ggally/ggally.html&gt;R-Open-Labs)'>Scatterplot matrices</a> are graphical analogs of correlation matrices, displaying bivariate scatterplots of all pairs of numeric variables in a data set as a twodimensional graphical array. Because the panels of a scatterplot matrix are just two-dimensional scatterplots, each panel is the appropriate summary graph for the regression of the y-axis variable on the x-axis variable.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-scatterplot-matrices}\n: Scatterplot Matrices\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::pairs\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-matrices-pairs}\n: Scatterplot matrices with `graphics::pairs()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-matrices-pairs}\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics::pairs(\n  formula = ~ prestige + income + education + women,\n  data = carData::Prestige\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-matrices-pairs-1.png){width=672}\n:::\n:::\n\nScatterplot matrix for the Canadian occupational-prestige data plotted with `graphics::pairs()`\n:::\n\n::::\n:::::\n\n\n###### lattice::splom()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-matrices-lattice-splom}\n: Scatterplot matrices with `lattice::splom()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-matrices-lattice-splom}  \n\n::: {.cell}\n\n```{.r .cell-code}\nlattice::splom(\n  x = ~ Prestige[1:4],\n  data = carData::Prestige\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-matrices-lattice-splom-1.png){width=672}\n:::\n:::\n\n\nScatterplot matrix for the Canadian occupational-prestige data plotted with `lattice::splom()`\n:::\n\n::::\n:::::\n\n###### car::scatterplotMatrix()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-matrices-car-scatterplotMatrix}\n: Scatterplot matrices with `car::scatterplotMatrix()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-matrices-car-scatterplotMatrix}\n\n::: {.cell}\n\n```{.r .cell-code}\ncar::scatterplotMatrix( ~ prestige + income + education + women,\n                   data = carData::Prestige)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-matrices-car-scatterplotMatrix-1.png){width=672}\n:::\n:::\n\n\nScatterplot matrix for the Canadian occupational-prestige data plotted with `car::scatterplotMatrix()` with density estimates on the diagonal\n:::\n\nAs in `car::scatterplot()` (@lst-chap03-scatterplot-car), mean and variability smoothers and a least-squares regression line are added by default to each panel of a scatterplot matrix and are controlled respectively by optional `smooth` and `regLine` arguments. (The `car::scatterplot()` and `car::scatterplotMatrix()` functions have many other arguments in common.)\n\nThe `id` argument for marking points is also the same for both functions, except that interactive point-marking isn’t supported for scatterplot matrices. \n\nThe diagonal argument to car::scatterplotMatrix() controls the contents of the diagonal panels. ()\n\n\n::::\n:::::\n\n###### GGally::ggpairs()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-matrices-GGally-ggpairs}\n: Scatterplot matrices with `GGally::ggpairs()\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-matrices-GGally-ggpairs}\n\n::: {.cell}\n\n```{.r .cell-code}\ncarData::Prestige |> \n  dplyr::select(4, 2, 1, 3) |> \n  GGally::ggpairs()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Registered S3 method overwritten by 'GGally':\n#>   method from   \n#>   +.gg   ggplot2\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-matrices-GGally-ggpairs-1.png){width=672}\n:::\n:::\n\n\nScatterplot matrix for the Canadian occupational-prestige data plotted with `GGally::ggpairs()` with density estimates on the diagonal and correlation coefficients on the upper half of the panel.\n:::\n\nIn contrast to the `car::scatterplotMatrix()` function `GGally::ggpairs()` also shows the correlation coefficients instead of reverting x/y axis for the other half of the scatterplots.\n\n::::\n:::::\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-chap03-GGally}\n: Scatterplot matrices with {**GGally**}\n::::::\n:::\n::::{.my-resource-container}\n\n- For theroetical background see \"The Generalized Pairs Plot\" [@emerson2013].\n- For practical usage: [Extra - Scatterplot Matrices With GGally](https://unc-libraries-data.github.io/R-Open-Labs/Extras/ggally/ggally.html) \n- For the general function `GGally::ggmatrix()` for managing multiple plots in a matrix-like layout: [ggmatrix(): Plot matrix](https://ggobi.github.io/ggally/articles/ggmatrix.html)\n\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\n## Transforming data {#sec-chap03-4}\n\n\n## Point labelling and identification {#sec-chap03-5}\n\nIdentifying extreme points can be especially valuable in graphs used for model building and diagnostics.\n    \n### The graphics::identify() function {#sec-chap03-5-1}\n\nThe `graphics::identify()` function in base R has a (clumsy) interface for interactive marking of interesting points.\n\n:::::{.my-procedure}\n:::{.my-procedure-header}\n:::::: {#prp-chap03-graphics-identify}\n: Displaying interesting points with graphics::identify()\n::::::\n:::\n::::{.my-procedure-container}\n`graphics::identify()` is\tinteractive, so you can’t use\tit\tconveniently in R\tMarkdown or Quarto documents.\n\n1. Enter the plot command to create the graphics where you want to label interesting points. You have to do this at the console! For instance: `with(carData::Freedman, plot(density, crime))`. This command produces the graphic in the RStudio \"Plots\" tab. \n2. Enter at the console the command for `graphics::identify()`. It needs at least three arguments: The x/y coordinates for the points and a vector with the labels. If the label vector is missing `identify()` uses the row number. The RStudio \"Plots\" tab is now interactive. You can see this as the message \"Locator active (Esc to finish)\" appears at the upper left of the RStudio \"Plots\" tab and a button \"Finish\" at the upper right. Additionally you see two icons at the upper right of the console window. When you hover over the green circle with the $\\infty$ sign a tool tip appears: \"Session suspend timeout paused: Waiting for event: locator_ completed R is executing\". The other icon is a stop sign.\n3. Click at (or near) the points you want to label. \n4. A “pin” icon flashes momentarily near the point, but point labels aren’t shown until you exit from point identification mode.\n5. After you have clicked on all points you are interested in, press \"Esc\" or the \"Finish\" button.\n6. The labels appear near the clicked positions and the console prints the row numbers of the points.\n7. To include the plot with the labelled points in your report you have either export the graph with the options \"Save as image…\", \"Save as PDF… or \"Copy to clipboard…\" or to create  the graph programmatically (for instance using {**ggplot2**} and {**ggrepel**}).\n\n![Scatterplots\tof\tcrime\tby\tpopulation\tdensity\tfor\tFreedman’s\tdata, with a few high-density cities identified manually by the graphics::indentify() function](img/chap03-rplot-identify-min.png){#fig-rplot-identify\nfig-alt=\"Scatterplots of crime by population density for Freedman’s data, with a few high-density cities identified manually by the graphics::indentify() function\"\nfig-align=\"center\"}\n\n::::\n:::::\n### Automatic point labelling with car::showLabels() {#sec-chap03-5-2}\n\nThe graphics functions in the {**car**} package employ a common general mechanism for point identification, using the `car::showLabels()` function to identify potentially noteworthy points.\n\n\n::: {#bul-ID-text}\n:::::{.my-bullet-list}\n:::{.my-bullet-list-header}\nArguments of `car::showLabels()` function\n:::\n::::{.my-bullet-list-container}\n- **Point identification** is controlled by the `id` argument, which takes the values TRUE, FALSE, or a detailed list of specifications. In\tmost\tcases,\tthe\tuser\tonly\tneeds\tto\tset\t`id = TRUE`\tor to\tspecify\tthe\tnumber\tof\tpoints\tto\tbe\tidentified, for\texample,\t`id = list(n = 5)`.\n- **labels**: By default, points are labeled with a data frame’s row labels or by row numbers if there are no row labels. You can use whatever point labels you like by setting labels to a character vector with the same number of elements as there are data points. \n- **n**: the number of points to label. \n- **cex**: the relative size of the labels; cex=0.5, for example, produces labels half the default size. \n- **col**: the color of the labels; if not set, the color is determined automatically. \n-**location**: where the labels are drawn. The default is `location = \"lr\"` to draw labels to the left of points in the right half of the graph and to the right of points in the left half. Another option is `location=\"ab\"`, to draw labels above points below the middle of the graph and below points above the middle. Finally, `location=\"avoid\"` tries to avoid overplotting labels. \n- **method**: Setting `method = \"identify\"` (the default) enables interactive point identification, as with `graphics::identify()`. Several automatic methods are available for determining how interesting points are to be identified. For example, in `car::scatterplot()`, the default is `method = \"mahal\"`, in which the <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distance of each point to the centriod (point of averages) is computed, and the identified points are those with the largest Mahalanobis distances. For `car::residualPlot()`, the default is `method = \"r\"`, selecting noteworthy points according to the absolute values of their vertical coordinates (i.e., the residuals) and labeling the points with the largest values. There are many other options for the method argument; see help (\"showLabels\") for their description and the help pages for particular car graphics functions for how they use `car::showLabels()`.\n::::\n:::::\nArguments of car::showLabels() function\n:::\n\n\n::: {.callout-important #imp-chap03-show-labels-with-ggplot}\n##### Developing my own show_labels() command\n\nI am trying to replicate the labelling of interesting points with {**ggplot2**}. The main idea for this additional work is to use the {**tidyverse**} approach and to stick with the more exhaustive functionality of the grammar of graphics.\n\nThis is not only programmatically a challenge but I have to learn and understand what type of graphics shows what type of \"interesting\" points (outliers, extreme values, high-leverage points) and how to compoute these points.\n\nSo far I have code proposals for\n\n- outliers in boxplots (@lst-chap03-compute-boxplot-outliers) and\n- Mahalanobis distances in linear model (@lst-chap04-davis-ggrepel)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/rglWebGL-binding-1.3.1/rglWebGL.js\"></script>\n<link href=\"site_libs/rglwidgetClass-1.3.1/rgl.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/rglwidgetClass-1.3.1/rglClass.min.js\"></script>\n<script src=\"site_libs/CanvasMatrix4-1.3.1/CanvasMatrix.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}