{
  "hash": "10e6423e3f4d151974310ba7060c28f3",
  "result": {
    "engine": "knitr",
    "markdown": "# Exploring and Transforming Data {#sec-chap03}\n\n\n\n\n\n\n## Chapter section list {.unnumbered}\n\n::::: {#obj-chap03}\n:::: {.my-objectives}\n::: {.my-objectives-header}\nTable of content (TOC)\n:::\n\n::: {.my-objectives-container}\n\n- Examing distribution (@sec-chap03-1)\n    - Histograms (@sec-chap03-1-1)\n    - Density estimation (@sec-chap03-1-2)\n    - Quantile-comparison plots (@sec-chap03-1-3)\n    - Boxplots (@sec-chap03-1-4)\n- Examing relationships (@sec-chap03-2)\n    - Scatterplots (@sec-chap03-2-1)\n    - Parallel boxplots (@sec-chap03-2-2)\n    - More in the plot function\n- Examining multivariate data\n    - Three-dimenional plots\n    - Scatterplot Matrices\n- Transforming data\n    - Logarithms\n    - Power transformations\n    - Transformations and EDA\n    - Transforming resticted-range variables\n    - Other transformations\n- Point labelling and identification (@sec-chap03-5)\n    - The identify() function (@sec-chap03-5-1)\n    - Automatic point labelling with car::showLabels() (@sec-chap03-5-2)\n    \n\n\n\n:::\n::::\n:::::\n\n## Examing distributions {#sec-chap03-1}\n\n### Histograms {#sec-chap03-1-1}\n\n> The shape of the histogram is determined in part by the number of bins and the location of their boundaries. With too few bins, the histogram can hide interesting features of the data, while with too many bins, the histogram is very rough, displaying spurious features of the data.\n\nThe help page for `ggplot2::geom_histogram()` recommends: \"You should always override this [default] value, exploring multiple widths to find the best to illustrate the stories in your data.\"\n\nThere are several algorithm to calculate an optimal number of bins depending of the sample size and distribution. Fox/Weisberg mention the rule by Freedman and Diaconis [-@freedman1981a]:\n\n$$\n\\frac{n^\\frac{1}{3}(max-min)}{2(Q_{3}-Q_{1})}\n$$ {#eq-chap03-FD}\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-histograms}\n: Histograms\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### base R\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-base-r-histogram}\n: Default base R histogram\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-base-r-histogram}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige <- carData::Prestige\n\nbase::with(Prestige, graphics::hist(income))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-base-r-histogram-1.png){width=672}\n:::\n:::\n\nDefault\tbase R histogram of income in the Canadian occupational-prestige data\n:::\n\n::::\n:::::\n\n###### FD rule\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-compute-bins-FD}\n: Compute number of bins with the Freedman-Diaconis rule [-@freedman1981a]\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-compute-bins-FD}\n\n::: {.cell}\n\n```{.r .cell-code}\nIncome <- Prestige$income\n    \nbase::ceiling(\n    base::length(Income)^(1/3) * \n    (base::max(Income) - base::min(Income)) / \n    (2 * (stats::quantile(Income, 0.75) \n          - stats::quantile(Income, 0.25)))[[1]]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 15\n```\n\n\n:::\n:::\n\n\nCompute number of bins of `income` with the Freedman-Diaconis rule [-@freedman1981a]\n:::\n\n::::\n:::::\n\n\n###### base R 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-fd-base-r-histogram2}\n: Base R histogram with `breaks = \"FD\"`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-fd-base-r-histogram2}\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::with(Prestige, graphics::hist(income, breaks = \"FD\"))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/fd-base-r-histogram2-1.png){width=672}\n:::\n:::\n\n\nBase R histogram: Number of bins computed after Freedman and Diaconis [-@freedman1981a]\n:::\n\n::::\n:::::\n\n\n\n###### ggplot2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-ggplot2-histogram}\n: Histogram with {**ggplot2**} (30 bins default)\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-ggplot2-histogram}    \n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        fill = \"grey\",\n        color = \"black\"\n        )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-ggplot2-histogram-1.png){width=672}\n:::\n:::\n\n\nHistogram with {**ggplot2**} with default number of bins (30)\n:::\n\n::::\n:::::\n\n###### ggplot2 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-default-ggplot2-histogram2}\n: Histogram with {**ggplot2**} with bin number computed after Freedman & Diaconis\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-default-ggplot2-histogram2}    \n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        fill = \"grey\",\n        color = \"black\",\n        bins = grDevices::nclass.FD(Prestige$income)\n        )\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/default-ggplot2-histogram2-1.png){width=672}\n:::\n:::\n\n\nHistogram with {**ggplot2**}. Bin number computed after Freedman and Diaconis [-@freedman1981a]\n:::\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\nA special type of histograms are *stem-and-leaf displays*, which are histograms that encode the numeric data directly in their bars. I do not find them very usefull, because they are different to interpret and do not have essential advantages. They may be helpful for small data sets as a kind of paper-and-pencil method for visualizing.\n\nStem-and-leaf graphs can be produced with the `graphics::stem()` function or using the `aplpack::stem.leaf()` function. \n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-chap03-aplpack}\n: Another Plot Package {aplpack}\n::::::\n:::\n::::{.my-resource-container}\nLooking at the {**aplpack**} package, I noticed that there are some interesting graphic funtions, which I should explore. For instance `aplpack::plotsummary()` is an interesting function that shows important characteristics of the variables of a data set. For each variable a plot is computed consisting of a barplot, an <a class='glossary' title='In statistics, an empirical distribution function (commonly also called an empirical cumulative distribution function, eCDF) is the distribution function associated with the empirical measure of a sample. This cumulative distribution function is a step function that jumps up by 1/n at each of the n data points. Its value at any specified value of the measured variable is the fraction of observations of the measured variable that are less than or equal to the specified value. (Wikipedia) A CDF is a hypothetical model of a distribution, the ECDF models empirical (i.e. observed) data. (Statistics How To)'>ecdf</a>, a density trace and a boxplot. \n\nSee @pak-aplpack.\n::::\n:::::\n\n\n\n\n\n\n\n\n\n### Density Estimation {#sec-chap03-1-2}\n\n*Nonparametric density estimation* often produces a more satisfactory representation of the distribution of a numeric variable than a traditional histogram. Unlike a histogram, a nonparametric density estimate is continuous and so it doesn’t dissect the range of a numeric variable into discrete bins.\n\nKernel density estimation (KDE) is the application of kernel smoothing for probability density estimation. The bandwith controls\tthe\tdegree of smoothness of\tthe density\testimate:\n\nThe bandwidth of a density estimate is the continuous analog of the bin width of a histogram: If the bandwidth is too large, then the density estimate is smooth but biased as an estimator of the true density, while if the bandwidth is too small, then bias is low but the estimate is too rough and the variance of the estimator is large. \n\nThe `adaptiveKernel()` function in the {**car**} package employs an algorithm that uses different bandwidths depending on the local observed density of the data, with smaller bandwidths in dense regions and larger bandwidths in sparse regions.\n\n\n\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-density-estimation}\n: Density estimation\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### stats::density() 1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density1}\n: Nonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates `(adjust = 1)`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-density1}\n\n::: {.cell}\n\n```{.r .cell-code}\nwith(Prestige, {\n    hist(\n        income,\n        freq = FALSE,\n        ylim = c(0, 1.5e-4),\n        breaks = \"FD\",\n        main = \"\"\n    )\n    lines(density(income, from = 0), lwd = 3, lty = 2)\n    lines(car::adaptiveKernel(income, from = 0, adjust = 1),\n          lwd = 2,\n          lty = 1) # solid line\n    rug(income)\n    legend(\n        \"topright\",\n        c(\"Fixed bandwidth\", \"Adaptive bandwidth\"),\n        lty = 2:1, # dashed with proportion 2:1\n        lwd = 2,\n        inset = .02\n    )\n    box()\n})\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density1-1.png){width=672}\n:::\n:::\n\nNonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates (adjust = 1) for the distribution of income in the `Prestige` data set; a density histogram of income is also shown. The rug-plot at the bottom of the graph shows the location of the income values.\n:::\n\n***\n\nThe command to draw the graph in @lst-chap03-density1 is relatively complicated and thus requires some explanation: \n\n- The `base::with()` function is used as usual to pass the data frame `Prestige` to the second argument. Here the second argument is a compound expression consisting of all the commands between the initial { and the final }. \n- The call to `graphics::hist()` draws a histogram in density scale, so the areas of all the bars in the histogram sum to 1. \n- The argument `main=\"\"` suppresses the title for the histogram. \n- The `ylim` argument sets the range for the y-axis to be large enough to accommodate the adaptive-kernel density estimate. The value 1.5e-4 is in scientific notation, 1.5 × 10−4 = 0.00015. \n- The fixed-bandwidth and adaptive-bandwidth kernel estimates are computed, respectively, by `stats::density()` and `car::adaptiveKernel()`. \n- In each case, the result returned by the function is then supplied as an argument to the `graphics::lines()` function to add the density estimate to the graph. \n- The argument `from = 0` to both `density()` and `adaptiveKernel()` ensures that the density estimates don’t go below income = 0. \n- The call to `graphics::rug()` draws a rug-plot (one-dimensional scatterplot) of the data at the bottom of the graph. \n- The remaining two commands add a legend and a frame around the graph.\n\n\n\n\n::::\n:::::\n\nBoth nonparametric density estimates and the histogram suggest a mode at around $5,000, and all three show that the distribution of income is rightskewed. The fixed-bandwidth kernel estimate has more wiggle at the right where data are sparse, and the histogram is rough in this region, while the adaptive-kernel estimator is able to smooth out the density estimate in the low-density region. \n\n\n###### stats::density() 2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density2}\n: Nonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates `(adjust = 0.5)`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-density2}    \n\n::: {.cell}\n\n```{.r .cell-code}\nwith(Prestige, {\n    hist(\n        income,\n        freq = FALSE,\n        ylim = c(0, 1.5e-4),\n        breaks = \"FD\",\n        main = \"\"\n    )\n    lines(density(income, from = 0), lwd = 3, lty = 2)\n    lines(car::adaptiveKernel(income, from = 0, adjust = 0.5),\n          lwd = 2,\n          lty = 1) # solid\n    rug(income)\n    legend(\n        \"topright\",\n        c(\"Fixed bandwidth\", \"Adaptive bandwidth\"),\n        lty = 2:1, # dashed with proportion 2:1\n        lwd = 2,\n        inset = .02\n    )\n    box()\n})\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density2-1.png){width=672}\n:::\n:::\n\n\nNonparametric fixed-bandwidth and adaptive-bandwidth kernel density estimates (adjust = 0.5) for the distribution of `income` in the `Prestige` data set; a density histogram of `income` is also shown. The rug-plot at the bottom of the graph shows the location of the `income` values.\n:::\n\n::::\n:::::\n\n###### ggplot2::geom_density()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-density-ggplot2}\n: Histogram, rug and smoothed density estimate\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-density-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(x = income)\n    ) +\n    ggplot2::geom_histogram(\n        ggplot2::aes(y = ggplot2::after_stat(density)),\n        color = \"black\",\n        fill = \"grey\",\n        bins = grDevices::nclass.FD(Prestige$income)\n    ) +\n    ggplot2::geom_density(\n        adjust = 1,\n        kernel = \"gaussian\",\n        color = \"red\",\n        linewidth = 1\n    ) +\n    ggplot2::geom_rug()\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/density-ggplot2-1.png){width=672}\n:::\n:::\n\n\nHistogram with a kernel density estimate overlaid, which is a smoothed version of the histogram. The rug-plot at the bottom of the graph shows the location of the `income` values from the `Prestige` dataset.\n:::\n\n::::\n:::::\n\n::: {.callout-warning #wrn-chap03-adaptive-kernel}\n##### Don't know how to inlcude adaptive kernel density estimation\n\nThe {**car**} package has with `car::densityPlot()` an additional function, that both computes and draws density estimates with either a fixed or adaptive kernel. I do not know how to include the adaptive kernel density estimation from the {**car**} package to get a full reproduction of book’s Figure 3.3 with {**ggplot2**}.\n:::\n\n\n\n\n###### my_hist_dnorm()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-my-hist-dnorm}\n: Using my own function to create a histogram with density estimate and overlaid dnorm curve\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-my-hist-dnorm}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_hist_dnorm(Prestige, Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/my-hist-dnorm-1.png){width=672}\n:::\n:::\n\n\nHistogram with density estimation and overlaid dnorm curve\n:::\n\n***\n\nI have my own function `my_hist_dnorm()` adapted by supplying the Freeman-Diaconis rule [-@freedman1981a] as default value for the number of bins.\n\nAdditionally I have written with `my_nbins()` another small functions which returns the number of bins according to the Freeman-Diaconis rule.\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\n### Quantile-comparison plots {#sec-chap03-1-3}\n\nA *quantile-comparison plot*, or quantile-quantile plot (<a class='glossary' title='A quantile-quantile plot is a visualization of data using probabilities to show how closely a variable follows a normal distribution. (SwR, Glossary) This plot is made up of points below which a certain percentage of the observations fall. On the x-axis are normally distributed values with a mean of 0 and a standard deviation of 1. On the y-axis are the observations from the data. If the data are normally distributed, the values will form a diagonal line through the graph. (SwR, chapter 6)'>Q-Q-plot</a>), provides an effective graphical means of making the comparison, plotting the ordered data on the vertical axis against the corresponding quantiles of the reference distribution on the horizontal axis. If the data conform to the reference distribution, then the points in the quantile-comparison plot should fall close to a straight line, within sampling error.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-qq-plots}\n: Quantile-quantile plots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### stats::qqnorm()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-stats-qqnorm}\n: Base R: Quantile-Quantile Plot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-stats-qqnorm}\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::qqnorm(Prestige$income,\n              ylab = \"Income\")\nstats::qqline(Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/stats-qqnorm-1.png){width=672}\n:::\n:::\n\nNormal quantile-comparison plot\tfor\t`income` from the `Prestige` dataset.\n:::\n\n***\nMany points, especially at the right of the graph, are far from the line of the theoretical quantiles. We have therefore evidence that the distribution of `income` is not like a sample from a normal population.\n\n::::\n:::::\n\n\n###### car::qqPlot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-car-qqplot}\n: car: Quantile-quantile plot\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-car-qqplot}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::qqPlot( ~ income, data = Prestige, id = list(n = 3))\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/car-qqplot-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> general.managers       physicians          lawyers \n#>                2               24               17\n```\n\n\n:::\n:::\n\n\nNormal quantile-comparison plot for `income.` \n:::\n***\nThe broken lines give a pointwise 95% confidence envelope around the fitted solid line. Three points were labeled automatically. Because many points, especially at the right of the graph, are outside the confidence bounds, we have evidence that the distribution of `income` is not like a sample from a normal population.\n\n::::\n:::::\n\nThe function `car::qqPLot()` has several advantages:\n\n1) It produces a pointwise 95% confidence envelope around the fitted solid line.\n2) It labels the most extreme data points.\n3) The `car::qqPlot()` function can be used to plot the data against *any* reference distribution.\n\n###### my_qq_plot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-my-qq-plot}\n: Q-Q-plot using my own function applying {**ggplot2**}\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-my-qq-plot}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_qq_plot(Prestige, Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/my-qq-plot-1.png){width=672}\n:::\n:::\n\n\nQ-Q-plot: Comparing data points against a normal distribution \n:::\n\n***\n\nMy own function lacks the confidence interval cannot label the most extreme points. I have to think if and how I could add these features to `my_qq_plot()`.\n\n::::\n:::::\n\n###### chi-square\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-chi-square-illustration}\n: car::qqPlot: Chi-square illustration\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-chi-square-illustration}\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::set.seed(124) # for reproducibility\ncar::qqPlot(\n    rchisq(100, 3), \n    distribution = \"chisq\", df = 3,\n    id = FALSE)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/chi-square-illustration-1.png){width=672}\n:::\n:::\n\n\nQuantile-comparison plot of a sample of size n = 100 from the $χ^2(3)$ distribution against the distribution from which the sample was drawn.\n:::\n***\n\nThe argument `df = 3` to `car::qqPlot()` is passed by it to the `stats::dchisq()` and `stats::qchisq()` functions. The points should, and do, closely match the straight line on the graph, with the fit a bit worse for the larger values in the sample. The confidence envelope suggests that these deviations for large values are to be expected, as they reflect the greater variability of sampled values in the long right tail of the $X^2(3)$ density function.\n\n::::\n:::::\n\n\n\n:::\n\n::::\n:::::\n\nThe `car::qqPlot()` function can be used to plot the data against any reference distribution for which there are <a class='glossary' title='Quantiles are cut points dividing the range of a probability distribution into continuous intervals with equal probabilities (Wikipedia)'>quantile</a> and density function in R. You have simply to specify the root word for the distribution. For\texample, the root\tfor\tthe\tnormal distribution is \"norm\", with\tdensity\tfunction\t`stats::dnorm()` and quantile function `stats::qnorm()`. See also [chapter 8](https://rstudio.github.io/r-manuals/r-intro/Probability-distributions.html) of the the Quarto manual of [An Introduction to R](https://rstudio.github.io/r-manuals/r-intro/). [@rcoreteam2024]\n\n![Probability functions in R](img/r-probability-functions.png){#fig-03-1 \nfig-alt='List of probability functions in R as a two part table with five columns: It shows the name of the \"Distribution\" (column 1), such as \"normal\" or \"chi-square\", the \"Design or Mass Function\" (column 2), such as \"dnorm(x, mean = 0, sd = 1)\" or \"qchisq(n, df)\", the \"Quantile Function\" (column 3), such as \"qnorm(p, mean = 0, sd = 1)\" the \"Distribution Function\" column 4), such as \"pnorm(q, mean = 0, sd = 1)\" or \"pchisq(q, df)\" and the \"Random Number Function\" (column 5), such as \"rnorm(n, mean = 0, sd = 1)\" or \"rchisq(n, df)\"' fig-align=\"center\" \nwidth=\"70%\"}\n\nAn illustration is shown with @lst-chap03-chi-square-illustration: The `rchisq()` function is used to generate a random sample from the chi-square distribution with three df (<a class='glossary' title='Degree of Freedom (df) is the number of pieces of information that are allowed to vary in computing a statistic before the remaining pieces of information are known; degrees of freedom are often used as parameters for distributions (e.g., chi-squared, F). (SwR, Glossary)'>degrees of freedom</a>) and then plotted the sample against the distribution from which it was drawn.\n\n### Boxplots {#sec-chap03-1-4}\n\nAlthough boxplots are most commonly used to compare distributions\tamong groups, they can also be drawn to summarize the distribution of a numeric variable in a single sample, providing a quick check of symmetry and the presence of outliers.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-boxplot}\n: Boxplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-base-r}\n: graphics::boxplot(): Boxplot of income\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics::boxplot(Prestige$income)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-base-r-1.png){width=672}\n:::\n:::\n\nBoxplot of income, plotted with base R `graphics::boxplot()`\n:::\n\n::::\n:::::\n\n\n###### car::Boxplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-car}\n: car::Boxplot(): Boxplot of income\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::Boxplot(~ income, data = Prestige)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-car-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] \"general.managers\"         \"lawyers\"                 \n#> [3] \"physicians\"               \"veterinarians\"           \n#> [5] \"osteopaths.chiropractors\"\n```\n\n\n:::\n:::\n\n\nBoxplot of income, plotted with `car::Boxplot()`. Several outlying cases were labeled automatically.\n:::\n\n***\n\n`car::Boxplot()` adds automatic identification of outlying values (by default, up to 10), points that are shown individually in the boxplot. Points identified as outliers are those beyond the *inner* fences, which are 1.5 times the interquartile range below the first quartile and above the third quartile.\n\nThe\tnames shown\tin the output are the cases that are labeled on the graph and are drawn from the row names of the `Prestige` data set.\n\n::::\n:::::\n\n\n\n\n\n:::\n\n::::\n:::::\n\nThe `ggplot2::geom_boxplot()` draws boxplots but has no options to label the outliers. To reproduce Figure 3.6 I need to add some code to the compute the outliers and label them with {**ggrepel**}. \n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-chap03-boxplot-outlier-labelled}\n: {ggplot2} boxplot with outlier labelled\n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n###### default\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-boxplot-ggplot2}\n: Boxplot of income (default)\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-boxplot-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige <- carData::Prestige\n\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(y = income)\n    ) +\n    ggplot2::geom_boxplot() \n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/boxplot-ggplot2-1.png){width=672}\n:::\n:::\n\n\nBoxplot of income, plotted with `ggplot2::geom_boxplot()`\n:::\n\n::::\n:::::\n\n\n###### outliers\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-compute-boxplot-outliers}\n: Boxplot of income with outliers labelled\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-compute-boxplot-outliers}  \n\n::: {.cell}\n\n```{.r .cell-code}\nmy_find_boxpot_outlier <- function(x) {\n  return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))\n}\n\n\nprestige1 <- Prestige |> \n  dplyr::mutate(outlier = my_find_boxpot_outlier(income)) |> \n  tibble::rownames_to_column(var = \"ID\") |>\n  dplyr::mutate(outlier =\n        dplyr::case_when(outlier == TRUE ~ ID,\n                         outlier == FALSE ~ \"\")\n  )\n\nset.seed(42)\n\nprestige1 |> \n    ggplot2::ggplot(\n        ggplot2::aes(y = income)\n    ) +\n    ggrepel::geom_text_repel(\n      ggplot2::aes(\n        x = 0,\n        label = outlier\n        ),\n      nudge_x      = 0.05,\n      direction    = \"y\",\n      hjust        = 0,\n    ) +\n    ggplot2::geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/compute-boxplot-outliers-1.png){width=672}\n:::\n:::\n\n\nBoxplot of income with outliers labelled plotted with `ggplot2::geom_boxplot()` and using `ggrepel::geom_text_repel()` \n:::\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n\n## Examing relationships {#sec-chap03-2}\n\n### Scatterplots {#sec-chap03-2-1}\n\nUnderstanding and using scatterplots is at the heart of regression analysis!\n\n<a class='glossary' title='A scatterplot is a graph that shows one dot for each observation in the data set (SwR, Glossary)'>Scatterplots</a> are useful for studying the mean and variance functions in the regression of the y-variable on the x-variable. In addition, scatterplots can help identify <a class='glossary' title='Outliers are observations with unusual values. (SwR, Glossary). Outliers are observed data points that are far from the least squares line. They have large “errors”, where the “error” or residual is the vertical distance from the line to the point. (Introductory Statistics 12.6)'>outliers</a>, points that have values of the response far different from the expected value, and <a class='glossary' title='You can think of the regression line being balanced at the x-mean and the further from that location a point is, the more a single point can move the line. We can measure the distance of points from the mean to quantify each observation’s potential for impact on the line using what is called the leverage of a point. Leverage is a positive numerical measure with larger values corresponding to more leverage. The scale changes depending on the sample size (n) and the complexity of the model so all that matters is which observations have more or less relative leverage in a particular data set. (Outliers - leverage and influence)'>leverage</a> points, cases with extremely large or small values on the x-axis.\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-scatterplot}\n: Scatterplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::plot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-base-r}\n: Simple scatterplot using base R `graphics::plot()` function\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\ngraphics::plot(prestige ~ income, data = Prestige)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-base-r-1.png){width=672}\n:::\n:::\n\nScatterplot of `prestige` versus `income` for the Canadian occupational-prestige data\n:::\n***\n\nThe scatterplot in @lst-chap03-scatterplot-base-r is a *summary graph* for the regression problem in which `prestige` is the response and `income` is the predictor. As our eye moves from left to right across the graph, we see how the distribution of `prestige` changes as `income` increases. In technical terms, we are visualizing the *conditional distributions* of `prestige` given the value of `income`.\n\n::::\n:::::\n\nThe overall story here is that as `income` increases, so does `prestige`, at least up to about $10,000, after which the value of `prestige` stays more or less fixed on average at about 80.\n\n\n###### car::scatterplot\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-car}\n: Enhanced scatterplot with `car::scatterplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::scatterplot(\n    prestige ~ income,\n    data = Prestige,\n    id = list(n = 4)\n    )\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-car-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> general.managers          lawyers        ministers       physicians \n#>                2               17               20               24\n```\n\n\n:::\n:::\n\n\nEnhanced scatterplot of prestige versus income produced by the `car::scatterplot()` function. Four points were identified using the `id` argument.\n:::\n\n***\n\n- **Points** correspond to the pairs of (`income`, `prestige`) values in the Prestige data frame, which is supplied in the data argument. \n- **The thick solid straight line** in the scatterplot is the simple linear regression of `prestige` on `income` fit by ordinary least squares (<a class='glossary' title='Ordinary least square regression (OLS) is a method of estimating a linear regression model that finds the regression line by minimizing the squared differences between each data point and the regression line. (Swr; Glossary)'>OLS</a>). \n- **The dashed line** is fit using a nonparametric *scatterplot smoother*, and it provides an estimate of the mean function that does not depend on a parametric regression model, linear or otherwise. \n- **The two dash-dotted lines** provide a nonparametric estimate of the square root of the variance function (i.e., the conditional standard deviation of the response), based on separately smoothing the positive and negative residuals from the fitted *nonparametric* mean function. \n- Also shown on each axis are **marginal boxplots** of the plotted variables, summarizing the univariate distributions of x and y. \n- The only optional argument is `id=list (n=4)`, to identify by row name the four **most extreme cases**, where by default “extreme” means farthest from the point of means using Mahalanobis distances.\n\nAll these features, and a few others that are turned off by default, can be modified by the user, including the color, size, and symbol for points; the color, thickness, and type for lines; and inclusion or exclusion of the least-squares fit, the mean smooth, variance smooth, and marginal boxplots. See help (\"scatterplot\") for the available options.\n\n\n\n::::\n:::::\n\nIn @lst-chap03-scatterplot-car the least squares line cannot match the obvious curve in the mean function that is apparent in the smooth fit. So modeling the relationship of `prestige` to `income` by simple linear regression is likely to be inappropriate.\n\n:::::{.my-resource}\n:::{.my-resource-header}\n:::::: {#lem-resource-text}\n: Nonparametric regression as an appendix to the R Companion\n::::::\n:::\n::::{.my-resource-container}\n@lst-chap03-scatterplot-car uses as an plot enhancement in the {**car**} package a smoother, designed to help us extract information from a graph. \n\n*Nonparametric regression*, in which smoothers are substituted for more traditional regression models, is described in an [online appendix to the R Companion](https://www.john-fox.ca/Companion/appendices/Appendix-Nonparametric-Regression.pdf).\n::::\n:::::\n\n\n###### ggplot2::geom_point()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-ggplot2}\n: Scatterplot with `ggplot2::geom_point()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = income,\n            y = prestige\n        )\n    ) +\n    ggplot2::geom_point(\n        shape = \"circle open\",\n        size = 2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"loess\",\n        span = .75,\n        level = 0.95\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\",\n        se = FALSE\n    ) +\n    ggplot2::coord_cartesian(\n      xlim = c(0, 26000),\n      ylim = c(10, 90),\n      expand = TRUE,\n      default = FALSE,\n      clip = \"on\"\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-ggplot2-1.png){width=672}\n:::\n:::\n\n\nScatterplot of `prestige` versus `income` produced by different functions of the {**ggplot2**} package. \n:::\n***\n\nThe default smoother employed by `ggplot2::geom_smooth()` dpends on the size of the largest group. `stats::loess()` would have been used here because we have less than 1,000 observation. But I have applied the `loess() `function explicitly to prevent a arning message.\n\nThe span in loess is the fraction of the data used to determine the fitted value of y at each x. A larger span therefore produces a smoother result, and too small a span produces a fitted curve with too much wiggle. The trick is to select the smallest span that produces a sufficiently smooth regression mean function. The default span of 2/3 works well most of the time but not always\n\n\n\n\n::::\n:::::\n\nBesides the labelled points and the marginal boxplots, I could not create smoother with the similar width as in the {**car**} example. I assume it has to do with \"the *nonparametric estimate* of the square root of the variance function (i.e., the conditional standard deviation of the response), based on separately smoothing the positive and negative residuals from the fitted nonparametric mean function. \"\n\n###### categorical\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-car-categorical}\n: Conditioning on a categorical variable\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-car-categorical}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige$type <- factor(Prestige$type, levels = c(\"bc\", \"wc\", \"prof\"))\ncar::scatterplot(\n    prestige ~ income | type,\n    data = Prestige,\n    legend = list(coords = \"bottomright\", inset = 0.1),\n    smooth = list(span = 0.9),\n    col = ggokabeito::palette_okabe_ito(c(1, 3, 5))\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-car-categorical-1.png){width=672}\n:::\n\n```{.r .cell-code}\nxtabs( ~ type, data = Prestige)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> type\n#>   bc   wc prof \n#>   44   23   31\n```\n\n\n:::\n\n```{.r .cell-code}\nglue::glue(\" \")\n```\n\n \n\n```{.r .cell-code}\nglue::glue(\"bc = blue color, wc = white color, prof = professional\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> bc = blue color, wc = white color, prof = professional\n```\n\n\n:::\n:::\n\n\nScatterplot of `prestige` versus `income`, coded with {**car**} by `type` of occupation. The span of the loess smoother is set to 0.9.\n:::\n***\n\n- **The variables** for the coded scatterplot are given in a formula as `y ~ x | g`, which is interpreted as plotting y on the vertical axis, x on the horizontal axis, and marking points according to the value of g (or “y versus x given g”).\n- **The legend** for the graph, automatically generated by the scatterplot () function, is placed by default above the plot; we specify the legend argument to move the legend to the lower-right corner of the graph.\n- We select a **larger span**, span=0.9, for the scatterplot smoothers than the default (span=2/3) because of the small numbers of cases in the occupational groups.\n- As **color palette** I used the colorblind friendly Okabe Ito scale from {**ggokabeito**} instead of the default colors from {**car**} .\n\nThe default smoother employed by `car::scatterplot()` is the loess smoother. The span in loess is the fraction of the data used to determine the fitted value of y at each x. A larger span therefore produces a smoother result, and too small a span produces a fitted curve with too much wiggle. The trick is to select the smallest span that produces a sufficiently smooth regression mean function. The default span in {**car**} of 2/3 works well most of the time but not always. (In {**ggplot2**} the default span is 3/4.)\n\n::::\n:::::\n\nThe nonlinear relationship in @lst-chap03-scatterplot-car has disappeared, and we now have three reasonably linear regressions with different slopes. The slope of the relationship between `prestige` and `income` looks steepest for blue-collar occupations and least steep for professional and managerial occupations.\n\n###### categorical2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-ggplot2-categorical}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-ggplot2-categorical}\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n    tidyr::drop_na(type) |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = income,\n            y = prestige,\n            group = type,\n            color = type,\n            shape = type\n        ), \n    ) +\n    ggplot2::geom_point(\n        size = 2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\",\n        se = FALSE\n    ) +\n    ggplot2::stat_smooth(\n        linetype = \"dashed\",\n        formula = 'y ~ x',\n        method = \"loess\",\n        se = FALSE, \n        span = .95,\n    ) +\n    ggokabeito::scale_color_okabe_ito(\n        order = c(1, 3, 5, 2, 4, 6:9)\n    ) +\n    ggplot2::scale_shape_manual(values = 1:3)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-ggplot2-categorical-1.png){width=672}\n:::\n:::\n\n\nScatterplot of `prestige` versus `income`, coded with {**ggplot2**} by `type` of occupation. The span of the loess smoother is set to 0.95.\n:::\n\n:::::: {#tdo-chap03-scatterplot-ggplot2-categorical}\n:::::{.my-checklist}\n:::{.my-checklist-header}\nTODO: Better legend inside graphic panel\n:::\n::::{.my-checklist-container}\n- Add legend for linetype\n- Create legend of occupation type without line, just the shape\n- Put legend bottom right inside the graph panel\n::::\n:::::\nHow to improve the legend of @lst-chap03-scatterplot-ggplot2-categorical\n:::\n\n\n::::\n:::::\n\n###### Jitter (car)\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-jitter-car}\n: Scatterplots of `vocabulary` by `education` using {**car**}\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-jitter-car}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\ncar::scatterplot(vocabulary ~ education, data = Vocab, main = \"(a)\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-car-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncar::scatterplot(\n  vocabulary ~ education,\n  data = Vocab,\n  jitter = list(x = 2, y = 2),\n  cex = 0.01,\n  col = \"darkgray\",\n  smooth = list(\n    span = 1 / 3,\n    col.smooth = \"black\",\n    col.spread = \"black\"\n  ),\n  regLine = list(col = \"black\"),\n  main = \"(b)\"\n)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-car-2.png){width=672}\n:::\n:::\n\n\nScatterplots of vocabulary by education with {**car**}: (a) using defaults, (b) jittering the points.\n:::\n***\n\n- The argument `jitter=list (x=2, y=2)` adds small random numbers to the x and y coordinates of each plotted point. The values x=2 and y=2 specify the degree of jittering relative to the default amount, in this case twice as much jittering. The amounts of jitter used were determined by trial and error to find the choices that provide the most information. \n- The argument `cex=0.01` reduces the size of the circles for the plotted points to 1% of their normal size, and `col=\"darkgray\"` sets their color to gray, more appropriate choices when plotting more than 30,000 points. As a consequence of jittering and using smaller and lighter plotting symbols, we see clearly that the density of points for education = 12, high school graduates, is higher than for other years, and that the data for education < 8 are very sparse. \n- We use the *smooth argument* to set the span for the default loess smoother to 1/3, half the default value of 2/3. Setting a smaller span uses less data to estimate the fitted curve at each value of education, allowing us to resolve greater detail in the regression function. Here we observe a dip in the regression function when education ≈ 11, so individuals who just missed graduating from high school perform somewhat worse than expected by a straight-line fit on the vocabulary test. Similarly, there is a small positive bulge in the regression function corresponding to college graduation, approximately 16 years of education. The specifications `col.smooth=\"black\"` and `col.var=\"black\"` set the color of the loess and variability lines, making them more visible in the graph; the default is the color of the points, now gray. \n- Finally, as before, the *main argument* sets the title of the graph.\n\n::::\n:::::\n\n###### Jitter (ggplot2)\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-scatterplot-jitter-ggplot2}\n: Scatterplots of `vocabulary` by `education` using {**ggplot2**\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-scatterplot-jitter-ggplot2}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\nVocab |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = education,\n            y = vocabulary\n        )\n    ) +\n    ggplot2::geom_jitter(\n        color = \"grey\",\n        size = .01,\n        alpha = 0.2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"loess\",\n        span = .7,\n        level = 0.95\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\"\n    ) \n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/scatterplot-jitter-ggplot2-1.png){width=672}\n:::\n:::\n\n\nScatterplots of vocabulary by education with {**car**}\n:::\n\n***\n \nAt first, using `span = 0.33` as in @lst-chap03-scatterplot-jitter-car I've got many warnings that I do not understand. (The same happened with the {**car**} approach, but these warnings did not appear in the outcome.) It seems that these warnings come when there are too many identical values, e.g. when the variable behaves more like a discrete variable than a continuous variable as it would be required for a proper smoothing (see: ).\n\nDespite the advice in a StackOverflow posting [R warnings, simpleLoess, pseudoinverse etc.](https://forum.posit.co/t/r-warnings-simpleloess-pseudoinverse-etc/8651) I changed span to 0.7 and the warnings disappeared. \n\n> Increasing the `span` parameter has the effect of \"squashing out\", … the piles of repeated values where they occur. … I would definitely not increase span to achieve the squashing: it is a lot better to use a tiny amount of jitter for that purpose; span should be dictated by other considerations….\n\nChanging the width and/or height of jitter didn't remove the warnings, but I got the advise in the warnings that I should enlarge `span`.\n\n::::\n:::::\n\n\n:::\n\n::::\n:::::\n\nThe {**car**} packages has the ability to display \"extreme\" points, mostly defined by the <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distance. Unlike simple Euclidean distances, which are inappropriate when the variables are scaled in different units, Mahalanobis distances take into account the variation and correlation of x and y.\n\n> The Mahalanobis distance (MD) is the distance between two points in multivariate space. In a regular Euclidean space, variables (e.g. x, y, z) are represented by axes drawn at right angles to each other; The distance between any two points can be measured with a ruler. For uncorrelated variables, the Euclidean distance equals the MD. However, if two or more variables are correlated, the axes are no longer at right angles, and the measurements become impossible with a ruler. In addition, if you have more than three variables, you can’t plot them in regular 3D space at all. The MD solves this measurement problem, as it measures distances between points, even correlated points for multiple variables. [@glenn2017]\n\n***\n\n:::::{.my-experiment}\n:::{.my-experiment-header}\n:::::: {#def-ID-text}\n: Numbered Experiment Title\n::::::\n:::\n::::{.my-experiment-container}\n\n::: {.panel-tabset}\n\n###### experiment1\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-code-name}\n: Numbered R Code Title 1\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-listing-ID}\n\n::: {.cell}\n\n```{.r .cell-code}\np <- carData::Prestige |> \n    ggplot2::ggplot(\n        ggplot2::aes(\n            x = income,\n            y = prestige\n        )\n    ) +\n    ggplot2::geom_point(\n        shape = \"circle open\",\n        size = 2\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"loess\",\n        span = .75,\n        level = 0.95\n    ) +\n    ggplot2::stat_smooth(\n        formula = 'y ~ x',\n        method = \"lm\",\n        se = FALSE\n    ) +\n    ggplot2::coord_cartesian(\n      xlim = c(0, 26000),\n      ylim = c(10, 90),\n      expand = TRUE,\n      default = FALSE,\n      clip = \"on\"\n)\n\nggExtra::ggMarginal(p, type = \"boxplot\")\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/experiment-1-1.png){width=672}\n:::\n:::\n\n  \nTitle for listing\n:::\n\n::::\n:::::\n\n\n\n###### experiment2\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-code-name-b}\nb: Numbered R Code Title (Tidyverse)\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-listing-ID}  \n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 2\n```\n\n\n:::\n:::\n\n\nTitle for listing\n:::\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n\n\n### Parallel boxplots {#sec-chap03-2-2}\n\n:::::{.my-example}\n:::{.my-example-header}\n:::::: {#exm-chap03-parallel-boxplots}\n: Parallel boxplots\n::::::\n:::\n::::{.my-example-container}\n\n::: {.panel-tabset}\n\n###### graphics::boxplot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-parallel-boxplot-base-r}\n: Parallel boxplots with `graphics::boxplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-parallel-boxplot-base-r}\n\n::: {.cell}\n\n```{.r .cell-code}\nVocab <- carData::Vocab\n\ngraphics::boxplot(vocabulary ~ education, data = Vocab)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/parallel-boxplot-base-r-1.png){width=672}\n:::\n:::\n\nBoxplots with `graphics::boxplot()` of `vocabulary` separately for each value of years of `education.`\n:::\n\n::::\n:::::\n\n\n###### car::Boxplot()\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-chap03-parallel-boxplot-car}\n: Parallel boxplots with `car::Boxplot()`\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chap03-parallel-boxplot-car}    \n\n::: {.cell}\n\n```{.r .cell-code}\ncar::Boxplot(vocabulary ~ education, data = Vocab, id = FALSE)\n```\n\n::: {.cell-output-display}\n![](03-exploring-data_files/figure-html/parallel-boxplot-car-1.png){width=672}\n:::\n:::\n\nBoxplots with `car::Boxplot()` of `vocabulary` separately for each value of years of `education.`\n:::\n\n***\nSetting `id = FALSE` prevents labelling up to ten outliers, which would be very distracting because of the many boxplots. Therefore we get using `car::Boxplot()` an identical graph as in @lst-chap03-parallel-boxplot-base-r with the base R version of `graphics::boxplot()`.\n\nWith `xtabs(~ education, data = Vocab)` we get the distribution of education:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~ education, data = Vocab)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> education\n#>    0    1    2    3    4    5    6    7    8    9   10   11   12   13   14   15 \n#>   43   12   44   78  106  137  335  361 1188  894 1335 1726 9279 2591 3447 1416 \n#>   16   17   18   19   20 \n#> 4090  954 1150  451  714\n```\n\n\n:::\n:::\n\n\n\n::::\n:::::\n\n:::\n\n::::\n:::::\n\n***\n\n:::::{.my-r-code}\n:::{.my-r-code-header}\n:::::: {#cnj-ID-text}\n: Numbered R Code Title\n::::::\n:::\n::::{.my-r-code-container}\n::: {#lst-chaplisting-ID}\n\n::: {.cell}\n\n```{.r .cell-code}\nDuncan <- carData::Duncan\n\ncar::scatter3d(prestige\t~ income + education,\t\n               data = Duncan,\t\n               id = list(n = 3)\n               )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required namespace: rgl\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n#> Loading required namespace: MASS\n```\n\n\n:::\n:::\n\n\nListing title\n:::\n\n::::\n:::::\n\n\n## Point labelling and identification {#sec-chap03-5}\n\nIdentifying extreme points can be especially valuable in graphs used for model building and diagnostics.\n    \n### The graphics::identify() function {#sec-chap03-5-1}\n\nThe `graphics::identify()` function in base R has a (clumsy) interface for interactive marking of interesting points.\n\n:::::{.my-procedure}\n:::{.my-procedure-header}\n:::::: {#prp-chap03-graphics-identify}\n: Displaying interesting points with graphics::identify()\n::::::\n:::\n::::{.my-procedure-container}\n`graphics::identify()` is\tinteractive, so you can’t use\tit\tconveniently in R\tMarkdown or Quarto documents.\n\n1. Enter the plot command to create the graphics where you want to label interesting points. You have to do this at the console! For instance: `with(carData::Freedman, plot(density, crime))`. This command produces the graphic in the RStudio \"Plots\" tab. \n2. Enter at the console the command for `graphics::identify()`. It needs at least three arguments: The x/y coordinates for the points and a vector with the labels. If the label vector is missing `identify()` uses the row number. The RStudio \"Plots\" tab is now interactive. You can see this as the message \"Locator active (Esc to finish)\" appears at the upper left of the RStudio \"Plots\" tab and a button \"Finish\" at the upper right. Additionally you see two icons at the upper right of the console window. When you hover over the green circle with the $\\infty$ sign a tool tip appears: \"Session suspend timeout paused: Waiting for event: locator_ completed R is executing\". The other icon is a stop sign.\n3. Click at (or near) the points you want to label. \n4. A “pin” icon flashes momentarily near the point, but point labels aren’t shown until you exit from point identification mode.\n5. After you have clicked on all points you are interested in, press \"Esc\" or the \"Finish\" button.\n6. The labels appear near the clicked positions and the console prints the row numbers of the points.\n7. To include the plot with the labelled points in your report you have either export the graph with the options \"Save as image…\", \"Save as PDF… or \"Copy to clipboard…\" or to create  the graph programmatically (for instance using {**ggplot2**} and {**ggrepel**}).\n\n![Scatterplots\tof\tcrime\tby\tpopulation\tdensity\tfor\tFreedman’s\tdata, with a few high-density cities identified manually by the graphics::indentify() function](img/chap03-rplot-identify-min.png){#fig-rplot-identify\nfig-alt=\"Scatterplots of crime by population density for Freedman’s data, with a few high-density cities identified manually by the graphics::indentify() function\"\nfig-align=\"center\"}\n\n::::\n:::::\n### Automatic point labelling with car::showLabels() {#sec-chap03-5-2}\n\nThe graphics functions in the {**car**} package employ a common general mechanism for point identification, using the `car::showLabels()` function to identify potentially noteworthy points.\n\n\n::: {#bul-ID-text}\n:::::{.my-bullet-list}\n:::{.my-bullet-list-header}\nArguments of `car::showLabels()` function\n:::\n::::{.my-bullet-list-container}\n- **Point identification** is controlled by the `id` argument, which takes the values TRUE, FALSE, or a detailed list of specifications. In\tmost\tcases,\tthe\tuser\tonly\tneeds\tto\tset\t`id = TRUE`\tor to\tspecify\tthe\tnumber\tof\tpoints\tto\tbe\tidentified, for\texample,\t`id = list(n = 5)`.\n- **labels**: By default, points are labeled with a data frame’s row labels or by row numbers if there are no row labels. You can use whatever point labels you like by setting labels to a character vector with the same number of elements as there are data points. \n- **n**: the number of points to label. \n- **cex**: the relative size of the labels; cex=0.5, for example, produces labels half the default size. \n- **col**: the color of the labels; if not set, the color is determined automatically. \n-**location**: where the labels are drawn. The default is `location = \"lr\"` to draw labels to the left of points in the right half of the graph and to the right of points in the left half. Another option is `location=\"ab\"`, to draw labels above points below the middle of the graph and below points above the middle. Finally, `location=\"avoid\"` tries to avoid overplotting labels. \n- **method**: Setting `method = \"identify\"` (the default) enables interactive point identification, as with `graphics::identify()`. Several automatic methods are available for determining how interesting points are to be identified. For example, in `car::scatterplot()`, the default is `method = \"mahal\"`, in which the <a class='glossary' title='Mahalanobis distance is a measure of how far a point is from the mean of a multivariate distribution, normalized by the covariance matrix of the distribution. It is calculated as the square root of the product of the difference vector, the inverse covariance matrix, and the transpose of the difference vector. (Google)'>Mahalanobis</a> distance of each point to the centriod (point of averages) is computed, and the identified points are those with the largest Mahalanobis distances. For `car::residualPlot()`, the default is `method = \"r\"`, selecting noteworthy points according to the absolute values of their vertical coordinates (i.e., the residuals) and labeling the points with the largest values. There are many other options for the method argument; see help (\"showLabels\") for their description and the help pages for particular car graphics functions for how they use `car::showLabels()`.\n::::\n:::::\nArguments of car::showLabels() function\n:::\n\n\n::: {.callout-important #imp-chap03-show-labels-with-ggplot}\n##### Developing my own show_labels() command\n\nI am trying to replicate the labelling of interesting points with {**ggplot2**}. The main idea for this additional work is to use the {**tidyverse**} approach and to stick with the more exhaustive functionality of the grammar of graphics.\n\nThis is not only programmatically a challenge but I have to learn and understand what type of graphics shows what type of \"interesting\" points (outliers, extreme values, high-leverage points) and how to compoute these points.\n\nSo far I have code proposals for\n\n- outliers in boxplots (@lst-chap03-compute-boxplot-outliers) and\n- Mahalanobis distances in linear model (@lst-chap04-davis-ggrepel)\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}